#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2024/05/22 11:46:07
# Search URL: https://esgf-node.llnl.gov/esg-search/wget?project=CORDEX&variable=tas&domain=EUR-11&rcm_name=COSMO-crCLIM-v1-1&driving_model=MOHC-HadGEM2-ES&ensemble=r1i1p1&experiment=rcp85&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget?project=CORDEX&variable=tas&domain=EUR-11&rcm_name=COSMO-crCLIM-v1-1&driving_model=MOHC-HadGEM2-ES&ensemble=r1i1p1&experiment=rcp85&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200601010000-200612302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200601010000-200612302300.nc' 'SHA256' '41d53f584e6b389a19d5a3ec7567e24c5474c259483369da333e9ab9fe307f41'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200701010000-200712302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200701010000-200712302300.nc' 'SHA256' '574f4982e191350c71752fca3317ef420be627b6181c77fd48b8ea3bcb2a40ab'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200801010000-200812302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200801010000-200812302300.nc' 'SHA256' '91cf68a53adedc20b3baa995050a7b4f8743f3e668715932dbcab0fe9b8085ca'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200901010000-200912302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200901010000-200912302300.nc' 'SHA256' '17688019ebf0f3de15c194c9e77306aaf5f0555f75b837093787a2e7e013dbb2'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201001010000-201012302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201001010000-201012302300.nc' 'SHA256' '13545dccda0994d1b833dfe5b00aed17ddaa954095b337d146dd3cc156a33289'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201101010000-201112302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201101010000-201112302300.nc' 'SHA256' '48a38803e13be6ec2374eda0955a1e2b86384112bbca365f2066f186909f4290'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201201010000-201212302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201201010000-201212302300.nc' 'SHA256' 'b5d305165b9e4de20e77160d631da2299ad1de967cb3e2dc8d5bbadf5bc009d1'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201301010000-201312302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201301010000-201312302300.nc' 'SHA256' '121b7f0ef3e9bf139fc2974c162ff7c9f9353094e1f0982e655493726e9f7223'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201401010000-201412302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201401010000-201412302300.nc' 'SHA256' '46d325ef769d816f6386aaec45a9adb3a63751b2cd639d9cd2fecc22d70cc766'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201501010000-201512302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201501010000-201512302300.nc' 'SHA256' '33090cbf6c61d8aa68e0a62b61c496b724dca8aa33b630a96ee445247e1d9408'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201601010000-201612302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201601010000-201612302300.nc' 'SHA256' '0ca40c82878675c4f5e122130c34239d4296a42a761179e81682deb9b480b538'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201701010000-201712302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201701010000-201712302300.nc' 'SHA256' '9052e3642854d564e76db5627785cb172a77cbfe01c7ad03861477a451b5fec9'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201801010000-201812302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201801010000-201812302300.nc' 'SHA256' 'eda1cf3255d4cb2b39e22bae3a96884f3dc9134c711604f89d1c59408bafcf9c'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201901010000-201912302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201901010000-201912302300.nc' 'SHA256' 'd1d968a66748f7311698cf403a8db8a8a4bf65cd828fbe0634b5ce9d515e01f6'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202001010000-202012302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202001010000-202012302300.nc' 'SHA256' '0b5caf23545429f3ea4a66bf8bf98489bc63c047786fb11d4b0d653bc508b010'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202101010000-202112302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202101010000-202112302300.nc' 'SHA256' '8fc062afd70814408114ba00740708fb9c359195f287741fab873247c03c0b6a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202201010000-202212302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202201010000-202212302300.nc' 'SHA256' 'a85fec53db0e724ab1b549e7a505aebd89d8484b770fae3a48d6650b92ce2f88'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202301010000-202312302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202301010000-202312302300.nc' 'SHA256' '464b8ac537098cf01bdc7a70487430cd264af36fbd0e4879dfb206029692b37b'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202401010000-202412302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202401010000-202412302300.nc' 'SHA256' '163a5c5d152090084a43e482e802ab07746966bfe3ad17e96dfbf4a66ef56893'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202501010000-202512302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202501010000-202512302300.nc' 'SHA256' '37aa38788a6474d0441144b35b1d1a66d9fd22edf941bf62b714ee13b2d8d878'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202601010000-202612302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202601010000-202612302300.nc' 'SHA256' '8e1a2adf4e3e3c6a8b129674815062c99a05cdbff8d385bfc0fab5cf89c20157'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202701010000-202712302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202701010000-202712302300.nc' 'SHA256' 'd4a31ad855b32234caa33fd95d9ba5a2d537eceffa85456b6baa666589e0f473'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202801010000-202812302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202801010000-202812302300.nc' 'SHA256' '6cb0d17a008536c7589d2945049155af49d0888b7c80eadd62861f0d48bce518'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202901010000-202912302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202901010000-202912302300.nc' 'SHA256' '6d72a40a93f4249d4c03d04eec500db8369942249aeca8c0c8741daff4dd1dc7'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203001010000-203012302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203001010000-203012302300.nc' 'SHA256' '79096cfc124db461f2a1f77ae6ddbabc3b332cd98cd3c6b0d194c22389d83721'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203101010000-203112302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203101010000-203112302300.nc' 'SHA256' '7aebf57d8081928f719b83be70d42b3bde44adff37ecad3a5ec6560dd89ae06a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203201010000-203212302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203201010000-203212302300.nc' 'SHA256' '7baabc75de2e4c7f3995f1fdd6ef30bc3b393ad3a2ad0c0486f0eee8a753c7ea'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203301010000-203312302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203301010000-203312302300.nc' 'SHA256' '326ac89de81c35d4c6b7b797d94c3c4b8b4b6ec8a775cfaa9b4fafab04f97f20'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203401010000-203412302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203401010000-203412302300.nc' 'SHA256' 'a11ac91eff5fee4d5b9a7882d47267ec34909c260852150f90830191d71b596a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203501010000-203512302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203501010000-203512302300.nc' 'SHA256' '59b202359c774b88a55a8a95dbc7bc71b702fc346264f8b9722a153a336bcaa4'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203601010000-203612302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203601010000-203612302300.nc' 'SHA256' '0a88e0fd561845fc4184e9c4af8003baa7263b2f2c2fccdb1fb5858b7e997b26'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203701010000-203712302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203701010000-203712302300.nc' 'SHA256' '0434a472680b70d70a44e7435de111cf11208f8a5032d26998d91dd6ba9da2d5'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203801010000-203812302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203801010000-203812302300.nc' 'SHA256' '251448125d4a6ce57bdbad63c996ee0a3982c2a4309927b6e0e6b0bf0f383752'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203901010000-203912302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203901010000-203912302300.nc' 'SHA256' '8a09798dfafca1de861747bf361e786ffad182ec0f9df99ac6600fd39574083a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204001010000-204012302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204001010000-204012302300.nc' 'SHA256' 'd0d39cb722459549cf5395d2d38112a5b44433a8fce6284bb57939195a08105f'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204101010000-204112302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204101010000-204112302300.nc' 'SHA256' '713ab58f448c722e1737f1f51e762d4b081dbaf6378e721ba29edb9e83f9a7cb'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204201010000-204212302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204201010000-204212302300.nc' 'SHA256' '450095328c076395922a329189d118e6ce74488d0e415f07b6a62bc565e7193a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204301010000-204312302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204301010000-204312302300.nc' 'SHA256' 'fc5ae85c5d70eefbc6c159346a2d76dd356934dcda5b57db1d5aa1092844ab6c'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204401010000-204412302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204401010000-204412302300.nc' 'SHA256' 'a8450a684c527296d2095b650052aadb23b97b4aec1c27856248167e055127bc'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204501010000-204512302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204501010000-204512302300.nc' 'SHA256' '25e8e24d71e935b89071c99b42da95510f072861c29bc18393b82d31f7f621bd'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204601010000-204612302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204601010000-204612302300.nc' 'SHA256' '3adcf2e93554db4cf8e7accb906e06a064fa1a8ae486c1872845d0180769b480'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204701010000-204712302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204701010000-204712302300.nc' 'SHA256' '89d9a81da791d493cf6fc989ba9fc1446ed4952f332a9d294e3afa97138baa0d'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204801010000-204812302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204801010000-204812302300.nc' 'SHA256' 'bd536898cd047e2ca52136b842c1343ea35434f76976171419107068b9159fa3'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204901010000-204912302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204901010000-204912302300.nc' 'SHA256' '7fd6af567da4e4aea1ef43bf239a18c71b7d696d92fdeb7eb3d2813447e4b900'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205001010000-205012302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205001010000-205012302300.nc' 'SHA256' '75abec623c54bb66b78cfeceeabe970d8d2bf443ce20388956f41ee9c3a876c5'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205101010000-205112302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205101010000-205112302300.nc' 'SHA256' '3e903ffda77b89d4fb39e7f67187e3b8a9ddd5622d9444101542a9d9c4c461b3'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205201010000-205212302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205201010000-205212302300.nc' 'SHA256' '09bc309348b8b2c41473c95a21e9f25a18ba179dab1a1fba0ad23d1dd7934ebb'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205301010000-205312302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205301010000-205312302300.nc' 'SHA256' 'ba865f0452f14c17333a0543629ee3e6eaace6c0dbd73e83182a659a87a9275f'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205401010000-205412302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205401010000-205412302300.nc' 'SHA256' '2a0f67236426739f19166bec625cb4ffa4397720c626bc2eea34617ebbbcc092'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205501010000-205512302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205501010000-205512302300.nc' 'SHA256' 'd4cb6b5638ebc055004408723398babfbdf7e2d996e8c789168d540a2e4f4d5d'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205601010000-205612302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205601010000-205612302300.nc' 'SHA256' '83c398da1eb7dfa7718e70ece7dd569e4fbea8bde98811e93634469976ad9e23'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205701010000-205712302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205701010000-205712302300.nc' 'SHA256' '2d78c54b999e3cb9a78d85d5c0106df4ead23a6ee62f22a270b8c17fbcdfcced'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205801010000-205812302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205801010000-205812302300.nc' 'SHA256' '9ce20ea9b83070c1e4434fd9d34f03125082de2c0b42042566d821c93c320f59'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205901010000-205912302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205901010000-205912302300.nc' 'SHA256' '7f9b7ef4f5b8947999a5d7ddccd0586c5b953e6a882ba41ffc9bc259ae295126'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206001010000-206012302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206001010000-206012302300.nc' 'SHA256' '465793a57af5225993d1d81f6b8fa5ca6d6bd45f702c0a8ebee58025c51b65af'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206101010000-206112302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206101010000-206112302300.nc' 'SHA256' 'de370bba4f0d1b753e49ee30076ffce6045c2e320fa0263151bdc5cec9787c6e'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206201010000-206212302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206201010000-206212302300.nc' 'SHA256' '225e2077018e3eebb1e93b288a1ed385e9ae8f2f0310bfe1144371c8505ff78f'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206301010000-206312302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206301010000-206312302300.nc' 'SHA256' 'd06d9b696a29e6f91082c4059022b8d0a670fa1f34802bf9aafb2b8700007b50'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206401010000-206412302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206401010000-206412302300.nc' 'SHA256' '66d4cf18a58944c559a9623562f63aa8698849e1bccd12b13d220ff5aadabd0a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206501010000-206512302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206501010000-206512302300.nc' 'SHA256' 'e4e2ca46e45f3855cc3f9deaece9dafdf77fdd12b201c3b92a942773958c0b8c'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206601010000-206612302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206601010000-206612302300.nc' 'SHA256' '65cedbaebdf1b3301a5e802a95d5f3b5b0296284804216f8049c488ccdd9bf84'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206701010000-206712302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206701010000-206712302300.nc' 'SHA256' 'cf068dda7f5e3155e522eaa2cd5bd3ec7460d950f62883d27302315d910cb184'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206801010000-206812302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206801010000-206812302300.nc' 'SHA256' '7cf9842c5d8757d866308437339f453ca982e3e1aa6a36481276c0d03a6488d9'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206901010000-206912302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206901010000-206912302300.nc' 'SHA256' '88b5da552bdf0df0aceab92274c8aeabb2dbac9d1ff2458346fb2a053d19ea05'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207001010000-207012302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207001010000-207012302300.nc' 'SHA256' '5bbc9053c437967dc9c9e9da9d0ee2ae2e0be106e4575c37594de1979812551e'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207101010000-207112302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207101010000-207112302300.nc' 'SHA256' 'ba33e64f712ae7c6956f7b0fe4ae31198bc3d91ec3ca8beaf45d85a2f143895b'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207201010000-207212302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207201010000-207212302300.nc' 'SHA256' 'f66fd1495b6d4952b50b4468eb271a4c1523bf3ace24ac4f97bfb61179f17a93'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207301010000-207312302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207301010000-207312302300.nc' 'SHA256' 'e064de6a507e5e2b30a71115b3523cce861083f4d299600853ad9bd54646404b'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207401010000-207412302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207401010000-207412302300.nc' 'SHA256' 'e05c0eb50e9e443d981f47be3f56575370d791122dea1dbfa48b630fa4663e66'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207501010000-207512302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207501010000-207512302300.nc' 'SHA256' '6fb8cd2986ca5a673e6fceae843b28a171a24296f97d9783605ff34be2b36009'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207601010000-207612302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207601010000-207612302300.nc' 'SHA256' 'bc3ccd180ba5481196e59e1967fb9b1b615a225d08fc7e4db5668eacbab77420'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207701010000-207712302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207701010000-207712302300.nc' 'SHA256' 'e9590b9bdafed85c0fef0e88fd3d7403897a1ca33f62cd8a16a0550eaa383150'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207801010000-207812302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207801010000-207812302300.nc' 'SHA256' '10836a02178a9d91b817e71b59e6678920de74f6395479ae3fadb11002b8b165'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207901010000-207912302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207901010000-207912302300.nc' 'SHA256' 'e77dbb66b8daa83372df228758a818bb3c196a5f67c48a468b3d9633da73deab'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208001010000-208012302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208001010000-208012302300.nc' 'SHA256' '2b854ad14470ed15f2508e95c4890fb311f57000569a117df4af228d72149e49'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208101010000-208112302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208101010000-208112302300.nc' 'SHA256' 'f1cf981bc26df9d49d8e3a9206f0c81f1d00f078d674687f5fa2044539bf1d05'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208201010000-208212302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208201010000-208212302300.nc' 'SHA256' '02b258b26d820960dcc39a04a9f6cfcc99c4d406a4570eb1907d9b05b4e2ace9'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208301010000-208312302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208301010000-208312302300.nc' 'SHA256' '1119537c23f78c7f906a309606e3e8c8883937d40fa0dac9bec3bb2a8d668ace'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208401010000-208412302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208401010000-208412302300.nc' 'SHA256' '5cf67936cb6be312ffde27292a9292d3e17274b27575cd88f838a3708b433a86'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208501010000-208512302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208501010000-208512302300.nc' 'SHA256' '0c255e4c09d3acf683542ac611faa6558f138a78f2c7c7fa1c3d93fbb954e227'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208601010000-208612302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208601010000-208612302300.nc' 'SHA256' 'bb75df7a6f0567ee0af18202d8a4b66f56bd53c5586b0d3479dc6195bc1b103b'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208701010000-208712302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208701010000-208712302300.nc' 'SHA256' '2c7c078a1a4089888176fbc44bf87d812edb553763d4db2ac08ffb6540117aad'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208801010000-208812302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208801010000-208812302300.nc' 'SHA256' 'b21643f7e909c9f287af2e27fe0d158d5cd83d41ad4c1c3563cc97ea4e3f7197'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208901010000-208912302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208901010000-208912302300.nc' 'SHA256' 'f21db2edab75244997705fce93b32e9439fcf63e54937245bfdf067c62ce0dd1'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209001010000-209012302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209001010000-209012302300.nc' 'SHA256' '4fa5fa490314f62e686aabd086a671e9c9c0fe545fa7c2016f31052be325c314'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209101010000-209112302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209101010000-209112302300.nc' 'SHA256' 'a345f2de7a1a69df84a172c3a362feedcea972ef2d05496ef61b3373377d0345'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209201010000-209212302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209201010000-209212302300.nc' 'SHA256' '86ae08ebb309e2b972f1c5bf33b058832d499d4f9e6a5f0b41d7d116c7bbb7bd'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209301010000-209312302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209301010000-209312302300.nc' 'SHA256' 'c6545a4c0150b57d2fe2d8af4c4e7814d51aefc2a1ae887292feb52b40eb703f'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209401010000-209412302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209401010000-209412302300.nc' 'SHA256' '86c4c2889deacb4dce24220fad14ac641cde0427f79766a76ebc48244d175522'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209501010000-209512302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209501010000-209512302300.nc' 'SHA256' '3bc840ba3ee30920f69092a5357e30bc3865aaaa91fb0f11f6b5b8d6aaef362b'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209601010000-209612302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209601010000-209612302300.nc' 'SHA256' 'e838efa65ddffe624248c40eb49f4f9d250e2fa61f607abeaf22b64973e82063'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209701010000-209712302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209701010000-209712302300.nc' 'SHA256' '54f889f1a6c781daf93109b44e40d4629e4a438a966267629290dce684b19c11'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209801010000-209812302300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/MOHC-HadGEM2-ES/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200924/tas_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209801010000-209812302300.nc' 'SHA256' '08a228c13ce50aabff55ce7484aa50308fe4842effde3d417f465bb47018bb2d'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 93 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
