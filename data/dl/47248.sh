#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2024/05/22 11:00:05
# Search URL: https://esgf-node.llnl.gov/esg-search/wget?project=CORDEX&variable=tas&domain=EUR-11&rcm_name=REMO2015&driving_model=MOHC-HadGEM2-ES&ensemble=r1i1p1&experiment=rcp45&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget?project=CORDEX&variable=tas&domain=EUR-11&rcm_name=REMO2015&driving_model=MOHC-HadGEM2-ES&ensemble=r1i1p1&experiment=rcp45&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_200601010100-200701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_200601010100-200701010000.nc' 'SHA256' '72f66d61c3797ce8482a4cb4811d7d5474b0cd1858b8a7ce21a6d98110be65dd'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_200701010100-200801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_200701010100-200801010000.nc' 'SHA256' 'a110124e46861021953e489881aee1a83ff72278fc66e51bf1f3e6525ab2ab1b'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_200801010100-200901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_200801010100-200901010000.nc' 'SHA256' '2c97f9a62ab23e1a3e352a1aa10702b93824d9b82b4f2a57db01ad6b34412a62'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_200901010100-201001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_200901010100-201001010000.nc' 'SHA256' '9e5ba54fc6104f0d1e56fa02c9315fba808615dce75325483b3a210363b9bc22'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201001010100-201101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201001010100-201101010000.nc' 'SHA256' 'ec162e77341be8a606271f0548259ad0da4c64e58973056eab18817fcb5bdd90'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201101010100-201201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201101010100-201201010000.nc' 'SHA256' '8418f0da5de415b55c58eed5789a9c5055169db86e815b22caf00e01f5e8a382'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201201010100-201301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201201010100-201301010000.nc' 'SHA256' 'd40bee26bf053dc45d0a77083206ec36693c1d786d88eaad61a00728927a55d5'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201301010100-201401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201301010100-201401010000.nc' 'SHA256' '175cb7268a3101b14e276491afd3294a06a16bf59598b48e563ba16552d9cea9'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201401010100-201501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201401010100-201501010000.nc' 'SHA256' 'cf52f725426d10eed64bdb61fbb5d05dffb8118f808a7fea955804b7fc998fce'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201501010100-201601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201501010100-201601010000.nc' 'SHA256' '1c9a965b6c281a2cb5ec8adf19a1f66f90cf3b226f8c1992a46ce407a31d645d'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201601010100-201701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201601010100-201701010000.nc' 'SHA256' '582380ba16ec0764589e0171716c3d36165fb0814ddab9704ace6198aa47a306'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201701010100-201801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201701010100-201801010000.nc' 'SHA256' 'f44b332151259e72485d3ffc921fa1b17e100ce646178b5b30bf05f7cdf60963'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201801010100-201901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201801010100-201901010000.nc' 'SHA256' '46deb2dd2011a38684f9b128a72056353534153f1652371f041830eedc90f4c6'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201901010100-202001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_201901010100-202001010000.nc' 'SHA256' '8a5c65b1f0d76d4df6e41620ebdc5850c41f0490aff1a9c0ef39458451d53ce9'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202001010100-202101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202001010100-202101010000.nc' 'SHA256' '2e9c8553766b3158e40adce1542227fb3e080c777b1606456c91882a9bb64e9e'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202101010100-202201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202101010100-202201010000.nc' 'SHA256' 'b34f16e7762f5b657d7fd0a42ab276263e1547656a913900a4f37f2b92df6fe2'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202201010100-202301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202201010100-202301010000.nc' 'SHA256' 'feefedaaa9a48c39705031579f54051e5d49fbce2b2e0e698f519dc171135ea3'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202301010100-202401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202301010100-202401010000.nc' 'SHA256' '5ef9e86befce50c3f5e061f4ba1f7a70b7af38a6b698cafc8321acf5146d788c'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202401010100-202501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202401010100-202501010000.nc' 'SHA256' '42651494f3574d73a1bf0ce54984f0f9aaf51421bea5a4a7b00ded6681e7bd7a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202501010100-202601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202501010100-202601010000.nc' 'SHA256' '673d19acb954cf78874565be5a5c729a491fb0ce7e742ba9d7d90fbeab800a66'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202601010100-202701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202601010100-202701010000.nc' 'SHA256' 'adcd787891ee93e58258fa6bbe361297cf98cd1b09289c405a1e06f3ed168241'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202701010100-202801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202701010100-202801010000.nc' 'SHA256' '1a3fd6155274a6aac6c0430b5d8adf44cc2a35b8923057e6eee8e99041da167e'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202801010100-202901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202801010100-202901010000.nc' 'SHA256' '6d1af0909eed32e00cbb618767bfc585f27bfd7c9c68d9d2c956c9075feb732a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202901010100-203001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_202901010100-203001010000.nc' 'SHA256' 'c2cd0e46821bebcd09acf8590c57c8efdda7f7fc7c879001a0c3534b48912aee'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203001010100-203101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203001010100-203101010000.nc' 'SHA256' '0a68cf0ed7b9892765d1eb83f2fdb48e6a8f6cf6047c83679d1bc1bebd3db462'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203101010100-203201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203101010100-203201010000.nc' 'SHA256' 'e876661adea6a376c0f1b05f776a9cdd97a6ac8f17dcd39b0e950a93cec2d10b'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203201010100-203301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203201010100-203301010000.nc' 'SHA256' '204fbcce42a11b87f938de7b2cd6d91cc8439119db4ffe730325f024337a69f9'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203301010100-203401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203301010100-203401010000.nc' 'SHA256' '2228004063886d2b125ce4d9aed9a24e52538e2a77e25e385fa82ed73b79c0f1'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203401010100-203501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203401010100-203501010000.nc' 'SHA256' '48c1c02686cf614c3772fd5f16d1e0b106e717a633602b58e04946ea31628197'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203501010100-203601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203501010100-203601010000.nc' 'SHA256' 'b0dfad5e8d05455c83a04f7a57f602b2204491ce7aa7884313f7617d1256ffa7'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203601010100-203701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203601010100-203701010000.nc' 'SHA256' 'd3507b8bc1202ce956bd3c606264383b4e7a7cdbacf7f8366e6cbeee8fab1372'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203701010100-203801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203701010100-203801010000.nc' 'SHA256' '0832208be460daf6c51cf688894cf06f09c50f18196ecfbb4c61cd6aaf92bfc9'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203801010100-203901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203801010100-203901010000.nc' 'SHA256' 'feb8b9be82bcc8deb6329e3af572c3707685da0b277ec1fa9703cea7f70cfe51'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203901010100-204001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_203901010100-204001010000.nc' 'SHA256' '009999eee05b486c62143fd8948c9e47de4b6dd12d9e95741d1482092ec7ae1a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204001010100-204101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204001010100-204101010000.nc' 'SHA256' 'ea66c44a504d92429e4f850e9dd9bd918a87f1df522c5ff4b510d7b8eae510ba'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204101010100-204201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204101010100-204201010000.nc' 'SHA256' 'e02756448b49b7e13eaacff584d6cf428407664aa5852dd70af6285033bda6fe'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204201010100-204301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204201010100-204301010000.nc' 'SHA256' '3b991565a42cef27fad490f8f6fc374da2ff630ff63d8e5c5c85a2064cf98ed5'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204301010100-204401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204301010100-204401010000.nc' 'SHA256' 'dc2a0f732e9fac23b583f7a3d9da89a4e51a0106ce6f07c52bce76c482b8973b'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204401010100-204501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204401010100-204501010000.nc' 'SHA256' 'e17703853e5c405ff967dfc1ee67ac064d3f65b2dfd2b7ea9108d619390c46fc'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204501010100-204601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204501010100-204601010000.nc' 'SHA256' '9974f02ad4de91b080dafc4f449d4b0a4a9d78d3ba800e3700a263415858a414'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204601010100-204701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204601010100-204701010000.nc' 'SHA256' '7159895f4ef4f6e01826067e351419b5768cb8e747480298c3995b862333be4e'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204701010100-204801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204701010100-204801010000.nc' 'SHA256' 'fee64fe4fb9f039c11141da02f88fa14d31af202fbe63188962e174403cc9b95'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204801010100-204901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204801010100-204901010000.nc' 'SHA256' '131f4da76b7a686d852793ac0d1cb5b73063835326caa7e33b84d76b66001d50'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204901010100-205001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_204901010100-205001010000.nc' 'SHA256' '37ecf84e27ceb564519e3517112b23f5f39d3a216fea3d24769cbc7a75e8d3d9'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205001010100-205101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205001010100-205101010000.nc' 'SHA256' 'cf2dfce5129f936fa609022c0711336a340d51146d7a2f00b98d9d2085247f5f'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205101010100-205201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205101010100-205201010000.nc' 'SHA256' '4945d132caf1c038fccb6fc8fe44be585ef7d88f82d7b238f71567f5a1ab8a87'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205201010100-205301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205201010100-205301010000.nc' 'SHA256' '56b5c3c3bce1aa5b1d7e83cd22be3d8e9af05048ff46ba5d0b97e7213b19a934'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205301010100-205401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205301010100-205401010000.nc' 'SHA256' '4f6e0387f30831f1b3b480ea5811a81d415e220f52090feffb55ea3dcf02a1a2'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205401010100-205501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205401010100-205501010000.nc' 'SHA256' 'b453d683d28c7ffbe8180481510bbd79ed728607aa26cc98cfb441228a59620d'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205501010100-205601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205501010100-205601010000.nc' 'SHA256' '24a7378112c0edd0c1a681cfc59a793bac08ec764efb1bc128b4bce0f2a9ab61'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205601010100-205701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205601010100-205701010000.nc' 'SHA256' '49444f8503cb604a134b0190d61e13b6e23a1b42d28d96563573fabfb4926b61'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205701010100-205801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205701010100-205801010000.nc' 'SHA256' '1ba8c020986dafae5b346abdc224e971e45912211001960b6456878abb7865a8'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205801010100-205901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205801010100-205901010000.nc' 'SHA256' '4cbfb944fd0a7da6aae84b822c9ce926dcf4fa91c1514688ebde786826db1fca'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205901010100-206001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_205901010100-206001010000.nc' 'SHA256' '33a219ddfbdf78577ee8fb587657c1da8bab39735e50157d4bfbdf5326178277'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206001010100-206101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206001010100-206101010000.nc' 'SHA256' '60027837b0f94848231011b4e12f0614019497cf255fcfccc14e0a21f8baf687'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206101010100-206201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206101010100-206201010000.nc' 'SHA256' '116898451d9d117ca42d95fb972f99c85e4f1630ea3b9d5f18bb5fa7def64fd1'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206201010100-206301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206201010100-206301010000.nc' 'SHA256' '634c770ea3084802012e44dc0d75522ca8e6c283bb40c7a13a8144e1fa2a194b'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206301010100-206401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206301010100-206401010000.nc' 'SHA256' '1f9007a73c95aceac457d92cb0582da39aa9eb4a9349d784a114d4cdc000f5b3'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206401010100-206501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206401010100-206501010000.nc' 'SHA256' 'a4cf882283de4aafd7ebf718c7f65db970185afa039b0aacbd152ac48de025fb'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206501010100-206601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206501010100-206601010000.nc' 'SHA256' '5a5cc347e1b6c7224a8a7bda213d0d7e0d48be648c553279f3a1e885d4f799c6'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206601010100-206701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206601010100-206701010000.nc' 'SHA256' 'bcb8f872602e397e0f27bbc383465c5f63735fe881e0792f952222479ac1e7ac'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206701010100-206801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206701010100-206801010000.nc' 'SHA256' 'd5019abac27a135d143d3d7c51f2f5a1dccfada05804b08db1772a14d4e1d247'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206801010100-206901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206801010100-206901010000.nc' 'SHA256' 'deb1095960467248170700a2776867dbf33a18d87e5c21883e008f092245cdf7'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206901010100-207001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_206901010100-207001010000.nc' 'SHA256' 'a13bd9145fd3f94ab0bc36a53a512b42167acb037a49b5dd6de092c6aa035181'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207001010100-207101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207001010100-207101010000.nc' 'SHA256' '49511cfdc1d27afce6fd0a696b76ed099bf79dbde8472240e1153e1555f55790'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207101010100-207201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207101010100-207201010000.nc' 'SHA256' '002b882ebd5ce16c7f80a5b6af0cb307caa4846a50481c6ebc37d586a3413ba9'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207201010100-207301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207201010100-207301010000.nc' 'SHA256' '9d914456c5a1328ca28b43086915ff6d355ffab0f561d00e8041717f3bdf337c'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207301010100-207401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207301010100-207401010000.nc' 'SHA256' '9352ddc8fef2793ad4a4cd8c6615af5a62ab4330f220a08f5b47c4cf5dd659df'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207401010100-207501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207401010100-207501010000.nc' 'SHA256' 'c5d5e60577b518c1efa26e05ed27d68309ea882083b4a926658a2a1b3470ad68'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207501010100-207601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207501010100-207601010000.nc' 'SHA256' '4d4fc7d022241e737106c426e666f1b6d8b2661455725cefdb42b32ebcb54f2d'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207601010100-207701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207601010100-207701010000.nc' 'SHA256' '7f10a731da0e0ea5c16d42478034bbd135f58bb3c426df9a89c630961fa878b2'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207701010100-207801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207701010100-207801010000.nc' 'SHA256' 'd3c8f6262ec2eea2d78b228f6054d0f9fb09bdb0f1fb8f64b4a02ec063dd1cfc'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207801010100-207901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207801010100-207901010000.nc' 'SHA256' '07443292d49e35c673295e12b1b1ec70ae2c7719d30cb3ad44e7ff07a2056df8'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207901010100-208001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_207901010100-208001010000.nc' 'SHA256' '5522412eb7390b57e8aac1a01702cf939e4d4a4140651a6585523fd27e71d2c5'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208001010100-208101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208001010100-208101010000.nc' 'SHA256' '0e1a103e99d302f58eeab65b784282a5dc70db5018b8cd92501291aa23c5dfa3'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208101010100-208201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208101010100-208201010000.nc' 'SHA256' '9f1f8399829f7ec224eba1983f3afa9dca5a63f6b28b57546c58b0d548061e2d'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208201010100-208301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208201010100-208301010000.nc' 'SHA256' '3d7e13490fecb265c87479df088be07557f23b36ab03304605e81edb66768b26'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208301010100-208401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208301010100-208401010000.nc' 'SHA256' 'af4e6b3e1319f64b35ca248cc8f5bd75a1f70415b18ae28111c04e3075f1dd6a'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208401010100-208501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208401010100-208501010000.nc' 'SHA256' '879359a6d932f9188a80939750041e01a3e2b61f7346e618924aa88d069b4620'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208501010100-208601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208501010100-208601010000.nc' 'SHA256' '8ce69ccc94cd21debe559c8402b785bf3e6ba3fe4a62b33e37c7db192f3378e0'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208601010100-208701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208601010100-208701010000.nc' 'SHA256' '0ccef7348f2e1ea90fe66ec9205de553efc704d4ec33d963bec418073bcc44d2'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208701010100-208801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208701010100-208801010000.nc' 'SHA256' '520c1e5cd0338178961f945343852a058255b2c6eeba1f6be38a7aa03b9a80df'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208801010100-208901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208801010100-208901010000.nc' 'SHA256' '1a02979330f88269991ab6ff79f0bae6b9ceb7ee0bf746020adcb7e170fb23ba'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208901010100-209001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_208901010100-209001010000.nc' 'SHA256' '6f79bb3f54cbd45c3dd75b2f0d6b97688bb3824b1d5281dbfe566dbd6f165a9f'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209001010100-209101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209001010100-209101010000.nc' 'SHA256' 'c720cf9a633c4b3eb3889dce492d22d76fe5fed51673d9ad3691a62095f7a7b4'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209101010100-209201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209101010100-209201010000.nc' 'SHA256' '842966f416ac0f63ff396308bd68dacaabc44673d05b435dddae9383116f2d5c'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209201010100-209301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209201010100-209301010000.nc' 'SHA256' '89b785bbe2208213d4fdb12c98f2241cfab3f3213b7e3212c48da181217ce32d'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209301010100-209401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209301010100-209401010000.nc' 'SHA256' 'a6f9d76c10289f030cca9c2c08fe8316ffc5dc44149872c6b8346efaa82a21ef'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209401010100-209501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209401010100-209501010000.nc' 'SHA256' 'ac203b702acd96d21618e620e4775d895b46a6e0df5f65713e5bc77df7205c1b'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209501010100-209601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209501010100-209601010000.nc' 'SHA256' '295b5da79648a0d4ccf5e4898a9b591f61f2904700515dca9ec34372bdc93fb1'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209601010100-209701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209601010100-209701010000.nc' 'SHA256' '3f0b72153e2305a9724ddcd3bb5cee961f168fbac8dfe8d0a8ab3689ac105462'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209701010100-209801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209701010100-209801010000.nc' 'SHA256' 'be5fcf83e706ab9881937ff54f2a05b34d646868fb87a544eb0310454fd8fbfa'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209801010100-209901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209801010100-209901010000.nc' 'SHA256' '244747204baec31f9c14d7e58f954cce218038623dd650f38ceccb8b28465f65'
'tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209901010100-210001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/GERICS/MOHC-HadGEM2-ES/rcp45/r1i1p1/GERICS-REMO2015/v1/1hr/tas/v20200702/tas_EUR-11_MOHC-HadGEM2-ES_rcp45_r1i1p1_GERICS-REMO2015_v1_1hr_209901010100-210001010000.nc' 'SHA256' '24f4d3b732e02a88b9222cf151f4eb3fd99bc0fbe8adb8c23298ec81d325ad51'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 94 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
