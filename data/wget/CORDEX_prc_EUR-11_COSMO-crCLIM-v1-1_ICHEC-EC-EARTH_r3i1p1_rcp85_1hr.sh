#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-data.dkrz.de - 2025/02/13 13:31:16
# Search URL: https://esgf-data.dkrz.de/esg-search/wget?project=CORDEX&variable=prc&domain=EUR-11&rcm_name=COSMO-crCLIM-v1-1&driving_model=ICHEC-EC-EARTH&ensemble=r3i1p1&experiment=rcp85&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-data.dkrz.de/esg-search/wget?project=CORDEX&variable=prc&domain=EUR-11&rcm_name=COSMO-crCLIM-v1-1&driving_model=ICHEC-EC-EARTH&ensemble=r3i1p1&experiment=rcp85&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200601010030-200612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200601010030-200612312330.nc' 'SHA256' '8e3a9c1b23f56e795c61c0f0117eaf93c092cf0f3d6d05f9655e1077f8c07cf8'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200701010030-200712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200701010030-200712312330.nc' 'SHA256' '14ad7a5bcd6f92cf0cea20f826236dec57a237ee8ea62e474b591a6638fd1e64'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200801010030-200812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200801010030-200812312330.nc' 'SHA256' '54f4e559d6511418d9b45120dea6d5647b31326127a6e58909f8e85fa139db94'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200901010030-200912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200901010030-200912312330.nc' 'SHA256' '34810838c9931173eeb866310f7aa66e4c3c779bc908793c4ccc98102a8046d9'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201001010030-201012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201001010030-201012312330.nc' 'SHA256' '3d91848abe0686a99d2971bbd3c3760d9f821806592a7c46a9c63879acdd5cc0'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201101010030-201112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201101010030-201112312330.nc' 'SHA256' '894c5a76fbbe3b6918e145a0af0108aff484b0c9b92bbe7a99a9f30b0c5a2fa8'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201201010030-201212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201201010030-201212312330.nc' 'SHA256' '1a3a05ef40301bc575a8be4421ea9b77d77d3357e066a442261faae6f13ca90b'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201301010030-201312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201301010030-201312312330.nc' 'SHA256' 'f5a88eec4aaf7c5c16717adcd1bf01acab96732cde49b85ac6d70aacb38f0215'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201401010030-201412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201401010030-201412312330.nc' 'SHA256' '9de9af526197a9386f6aa07f54892e2d896e7aa6de35491017cbf664c3f94b43'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201501010030-201512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201501010030-201512312330.nc' 'SHA256' '5ddd17d00b1cd22b94e2eb8c487b8d563446649953d591e4df5be5cd189531e1'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201601010030-201612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201601010030-201612312330.nc' 'SHA256' '2390e5e5814b43c1f22e4887d888cb43b70d68d60746bca23bbe2bbc03e81aa2'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201701010030-201712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201701010030-201712312330.nc' 'SHA256' '31528a6965d2dd5a77e1964092cc3419b91f43937728b17f442d42904b768c68'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201801010030-201812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201801010030-201812312330.nc' 'SHA256' '4ea0ed816b259ef6095e8449f77399a7d9d73e5aec63b5deeb4c94119c7f33b1'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201901010030-201912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201901010030-201912312330.nc' 'SHA256' 'a51a1b7251261894fcc2b1994a219a4957c08d5517726be6f8d1bde5a56d495c'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202001010030-202012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202001010030-202012312330.nc' 'SHA256' '6fc1fe62d9781c99dadcd935bc4085632d16d54bbbb3ef0f9030585aeb5dfe97'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202101010030-202112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202101010030-202112312330.nc' 'SHA256' '837e48034aca4fd2f6a240be0c094ea392b498afb4f6ce3203bce36880e8a72f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202201010030-202212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202201010030-202212312330.nc' 'SHA256' 'fe185e749cd23a639b469b4465d93dd1e21f65a7a12d41f8b25c0c0d5387037a'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202301010030-202312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202301010030-202312312330.nc' 'SHA256' '94746817f132fa62f614431e7a7237c361ee779b90c970e5c1264fe32a2a101f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202401010030-202412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202401010030-202412312330.nc' 'SHA256' '452ba54b163e65c651194659e6d84e93295ee7ef92cfdf8e274e5804bde945a2'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202501010030-202512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202501010030-202512312330.nc' 'SHA256' '9291eef2493be8ab76166b5e5a2aeb6f2a1d267533e4b3518b40bbc98167a856'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202601010030-202612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202601010030-202612312330.nc' 'SHA256' 'f9768359d322769b3a73aff6826688f2392dbfc6471efdb8e8619f39dc6c64cb'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202701010030-202712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202701010030-202712312330.nc' 'SHA256' 'a6a36387e3e65519cbc55f984bff62231917a78fbc01949218e7addc01a684f9'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202801010030-202812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202801010030-202812312330.nc' 'SHA256' '16a1849d70e79df00d2064e349142206c1ab4bcf01562a3f88eea7d6701ecc22'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202901010030-202912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202901010030-202912312330.nc' 'SHA256' '5300dd0bfb283da84aab56ea2fc3affd427bd86a6b966b5f0e4583ca6566e4a1'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203001010030-203012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203001010030-203012312330.nc' 'SHA256' '8de1ab27e47426040e2ff22b55aa8c965cec55a36c1d9eab406d9e61076e376a'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203101010030-203112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203101010030-203112312330.nc' 'SHA256' '208f83061c8614803a1d114d1a076ae36e16b9b47bc8300e520049f6d586a2e8'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203201010030-203212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203201010030-203212312330.nc' 'SHA256' '4ebd4ab8896a406b7b1fff38fade35280eccd2647c0ba74a4de2d2b24d0aa0e8'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203301010030-203312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203301010030-203312312330.nc' 'SHA256' 'dfee9eb9420e11b1362e51c51b6ca151632c27c123c21d126adbb375a12c4b79'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203401010030-203412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203401010030-203412312330.nc' 'SHA256' '73ef1264a58db62a97f612c81ceecf632c450832b90888f60edc39f8cc52982a'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203501010030-203512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203501010030-203512312330.nc' 'SHA256' 'ce8e47236bbd748650da218a6baee8def2cf25cf06fa965d1b6ee107c86a8d3c'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203601010030-203612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203601010030-203612312330.nc' 'SHA256' '1d5e61fff7a04c77f0803241d74eda8078e7b7c383d55636b228d7fdf471c8b2'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203701010030-203712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203701010030-203712312330.nc' 'SHA256' 'bf5ab67da82828d756368bdf4840d7d1f65047720fd4668a75a6b1fb0ed3ac2f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203801010030-203812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203801010030-203812312330.nc' 'SHA256' 'ef028ec1d43a41ecaf5b5e8325b9296023f4e9d5fb247eea858eda61b29f7490'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203901010030-203912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203901010030-203912312330.nc' 'SHA256' '00ddcdd1d692126092994ca6a7234650d8ee6453f041c141ccfe5b0bc055e9b9'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204001010030-204012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204001010030-204012312330.nc' 'SHA256' '2f6547b5874973f2bd64fedd03430f5a35739804bd4ef4932f4b05c4437688c8'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204101010030-204112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204101010030-204112312330.nc' 'SHA256' 'b57af4bdf1f1ebce94d1d25d07181b9a31503ede9c511298bc1ac10110e95414'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204201010030-204212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204201010030-204212312330.nc' 'SHA256' '25f23a1b7f65569f45903aac11be43803a61278f7fc7433bf396c0af7644c3b8'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204301010030-204312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204301010030-204312312330.nc' 'SHA256' 'fc11a192f698694e1657f43ce2ca96fd8c212b3d86c8a0221868f8d03eee917b'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204401010030-204412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204401010030-204412312330.nc' 'SHA256' '8fddc56e56ebfa6d9bdf3800d3465d23b74c557d5ec14d3969985ae8c88734a6'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204501010030-204512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204501010030-204512312330.nc' 'SHA256' '87444e89b148df4d861789b5fe255d5ed361c520e660de0853d0228616e99b54'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204601010030-204612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204601010030-204612312330.nc' 'SHA256' 'a18d8f644bedb30d34ad3adabb416854f06854bdfa40e1f538f6c41b5f30c1ba'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204701010030-204712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204701010030-204712312330.nc' 'SHA256' '50996fd11b4523128979f8ab74599b638d5292bd7e996143d3c538314b18e9b2'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204801010030-204812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204801010030-204812312330.nc' 'SHA256' '12433b407235a84f824a8c5bfa525ac153ab87026ca3124ad20783c417b847e2'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204901010030-204912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204901010030-204912312330.nc' 'SHA256' 'eedfd60804be6fb26b91e3b0173675429ee0cedf18bc32275cab39ee08800e7a'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205001010030-205012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205001010030-205012312330.nc' 'SHA256' '9aec6a28479cb97c0bbaa5e02ea0d919f67de47085a367a7370e63fee870a856'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205101010030-205112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205101010030-205112312330.nc' 'SHA256' '4177ec94d6fc1535da0a1b67de65b9c67d9f0fe592977dea207f05b416a8258f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205201010030-205212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205201010030-205212312330.nc' 'SHA256' '9a587ba86a8c53c08e78eb6037a15c6f375978582a9d36b06117fec769f1a77f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205301010030-205312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205301010030-205312312330.nc' 'SHA256' '3e7b4aa92d2242fe7cf1b561d90dfaa704de0bfc615dda5db14a1c8ebb65c71d'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205401010030-205412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205401010030-205412312330.nc' 'SHA256' 'eef41a5d44c0ae0407a5f91eec8bddead17f73ad65aca2f8b8c41fe3a9dfa5fc'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205501010030-205512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205501010030-205512312330.nc' 'SHA256' 'fb6feb1ce55730cee119079f02c4f822b33e9560a0024c6dce52a23495fd69b5'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205601010030-205612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205601010030-205612312330.nc' 'SHA256' '3a70e5eb85db8eed5d61cb5e610805155606635c749916812d15baeb80eed8f4'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205701010030-205712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205701010030-205712312330.nc' 'SHA256' '0b709989b6ddb8f7a4daa5b4d077c5ab3652ae3212c14ac5b8bcd3dc3ec53bfb'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205801010030-205812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205801010030-205812312330.nc' 'SHA256' '5ee23239ce5279575c369e877443b260e2e3e0eff92d121369e4cc251def01b4'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205901010030-205912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205901010030-205912312330.nc' 'SHA256' '519daac8313ec04647f39bbe3c81007f361f9b0cea2f94cc034d0738214a54ac'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206001010030-206012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206001010030-206012312330.nc' 'SHA256' '439afc9d5492f8234ffa09e7f3ff5e6f80d0d9dc6de5ef667a3663699b70877e'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206101010030-206112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206101010030-206112312330.nc' 'SHA256' '82a4b758add2a8a39120cd101e7db0bd76232e106d54580f3b352b433a7893d6'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206201010030-206212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206201010030-206212312330.nc' 'SHA256' '97e60daebf41d9ad57e75ca849f5fe2c90bde3758d4f42c39054b5aa53b683cf'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206301010030-206312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206301010030-206312312330.nc' 'SHA256' '2b86c2a90b7b873b79bdcd3eb7f52eb5de677d1f35b7b5fbd49d1c16fd47ea67'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206401010030-206412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206401010030-206412312330.nc' 'SHA256' '70815ff8a4ddaa6cb025360b8abd30ea8cbc44b4d368b0ef32ada67aee588dc9'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206501010030-206512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206501010030-206512312330.nc' 'SHA256' '2384c192d977d96c334daae91ce95b21823c6541b312c9c92ede2a0ae603cf88'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206601010030-206612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206601010030-206612312330.nc' 'SHA256' 'd37d0e075f3029b5632c7cbcb904b264136884370cf0dd2d195d4bb2026bba79'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206701010030-206712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206701010030-206712312330.nc' 'SHA256' 'e7530a52fb1312a0a95b2aa9ab50409637a0b776be88e99b007843fa804f5e6c'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206801010030-206812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206801010030-206812312330.nc' 'SHA256' 'dbae12dd269c6ceb481ecbf0585016c0cbe1ec6a0d0f8ad87815688f26fddd6f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206901010030-206912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206901010030-206912312330.nc' 'SHA256' 'c7bda23efbb083a1ca10967f53d9319b0f5df2ad90574a4041a6b99b83319a8b'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207001010030-207012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207001010030-207012312330.nc' 'SHA256' 'f915c8c1047b1f5185e7b638a3a193093683ea1a4a6e3e576a84a4d39aa2d6e1'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207101010030-207112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207101010030-207112312330.nc' 'SHA256' '49b452937b4881f328306545ab4750d9229a04166e1c0b14087d0d095d06d83e'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207201010030-207212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207201010030-207212312330.nc' 'SHA256' '4f5419961340748cd737e478b14e3a93e5f7f9712c5172eadb08cd6a4b292dbe'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207301010030-207312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207301010030-207312312330.nc' 'SHA256' 'cd386778a24f7f068bc3888db8bbdd06c7b1c1ecc80c0dff7e9d472f4cd319f7'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207401010030-207412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207401010030-207412312330.nc' 'SHA256' '0f1d97efc6f53ae88fb43dc171c55546a5e1ed5ef899d82b98dd3f272608a151'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207501010030-207512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207501010030-207512312330.nc' 'SHA256' '6468cfda87fcd495510e98598ed50f0d34ebb63cba60cc05ffdf63ce7d15aea3'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207601010030-207612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207601010030-207612312330.nc' 'SHA256' '9473991816ad5b9dbd910b7fabfdb0593160a2b5bf8c669955d24dfd769832a8'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207701010030-207712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207701010030-207712312330.nc' 'SHA256' 'c9efd8222617bb1173914014cb4f85543a87e08826acd394ffd62762d67d2310'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207801010030-207812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207801010030-207812312330.nc' 'SHA256' '0190b791bd355313cd00bae1bfcba83465acaf0f2b66de41941fc8cb7ddc1a41'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207901010030-207912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207901010030-207912312330.nc' 'SHA256' '5bd7858d9a7c97da2ebcc85ae7aa86fa73d5ad772f216f5477edb3564e0252a3'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208001010030-208012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208001010030-208012312330.nc' 'SHA256' 'aee47b391e01318b340f93caa6a3e65e6dffbb010b0e73037001b6539552ad54'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208101010030-208112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208101010030-208112312330.nc' 'SHA256' 'd7857857fa0306b8a5417a8ceb80bf6fc7b24216b0685640dcc650935a99a64c'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208201010030-208212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208201010030-208212312330.nc' 'SHA256' '99c308a2fd59563218315d6514312eebcec171812623fd375a74630a1383c149'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208301010030-208312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208301010030-208312312330.nc' 'SHA256' '044ea52f6335767e343bf9e263516b73b941b391747a53e6746d6b736043c82f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208401010030-208412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208401010030-208412312330.nc' 'SHA256' '6e6613803f9c5f6cb45886867d512aa90a9d6328f06080ca94fee7814147e307'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208501010030-208512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208501010030-208512312330.nc' 'SHA256' '73f4bcf6bca88d755ce2c10be83ac2c1e25a4a2a04787e2c52b4adf1f6e29402'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208601010030-208612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208601010030-208612312330.nc' 'SHA256' '77b3156728902403b5c920732fdf294bd992f0745fb0d7055c14db713c188d6e'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208701010030-208712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208701010030-208712312330.nc' 'SHA256' 'bc2367e953eaaf6c00b39f644cd87482f1d9b7e2328a0a53087fe8af0bcce785'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208801010030-208812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208801010030-208812312330.nc' 'SHA256' 'f0b07de99646b84980693b207760a03b1d2d1ad421dc7a6240e2ae1777e19908'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208901010030-208912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208901010030-208912312330.nc' 'SHA256' '0838cafd3203b270b2e4bad3ededf011c186680f3187f5b4d2500e381a2678de'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209001010030-209012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209001010030-209012312330.nc' 'SHA256' '52c78935759798d4ef241002e98e53f8f1f150b0695f773b6139393e1c72c967'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209101010030-209112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209101010030-209112312330.nc' 'SHA256' '6ce85cf0b78426a688b2cf0994071f9572ce11a5b681eddd1885615ef0ad7122'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209201010030-209212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209201010030-209212312330.nc' 'SHA256' 'c65ebabe70cca165dcc2ff4f588810b2556ea81cd5f9569bd19326f26a97e535'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209301010030-209312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209301010030-209312312330.nc' 'SHA256' '95cc703006ac27017339069fdb51fc3be2cfc0961c8cabd87432ee891cf570db'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209401010030-209412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209401010030-209412312330.nc' 'SHA256' '1b446efc38f458db4388b1818762dff5354da6f5ea2321faca5523a18287744b'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209501010030-209512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209501010030-209512312330.nc' 'SHA256' '4c9cb015c06431fd0515b4b4ccb4822b254d87613954d3d110618f5006256c32'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209601010030-209612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209601010030-209612312330.nc' 'SHA256' '1dc31c8252a7233d4868a29b585864c5b35d934d2e6e242ecb3a422527df3eb7'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209701010030-209712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209701010030-209712312330.nc' 'SHA256' '0d592cb0693b2d6783bf609d0af8fa4bb5a651978a2410b971b44f81cb0ecd07'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209801010030-209812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209801010030-209812312330.nc' 'SHA256' 'c6bf7ac7355623b0d38c2fec743f5c257bb363282b8f2c6c1f9f3ffebb6bd6e1'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209901010030-209912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209901010030-209912312330.nc' 'SHA256' 'b899ddec2268c0939724e00c03ca5de2e8edf47b37d80e829d0bb0f5225123eb'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_210001010030-210012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r3i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r3i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_210001010030-210012312330.nc' 'SHA256' '925f8b630caab6b94891254a5f30b340fb0380e2b616948a61f56c216968df6d'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 95 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
