#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/11/27 05:01:49
# Search URL: http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-11&rcm_name=RCA4&driving_model=MPI-M-MPI-ESM-LR&ensemble=r1i1p1&experiment=rcp85&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-11&rcm_name=RCA4&driving_model=MPI-M-MPI-ESM-LR&ensemble=r1i1p1&experiment=rcp85&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_200601010030-200612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_200601010030-200612312330.nc' 'SHA256' '517e0f0a6b0443b648692451c26797c2f818370a9dee65ce74c3f55ef19a603f'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_200701010030-200712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_200701010030-200712312330.nc' 'SHA256' '23bbcf8ac6d8343d17e4d903f3643fd71b1b5fe198dabe6334df2027c8d6fac8'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_200801010030-200812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_200801010030-200812312330.nc' 'SHA256' '0aea2d2c0f73c205262c9d74d2d7b796025197fcfc174a596395f49129aa2f88'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_200901010030-200912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_200901010030-200912312330.nc' 'SHA256' '68869915ff4d650a2cd8779d39ed198697e18e5c63e894b4ac79256bea16f7be'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201001010030-201012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201001010030-201012312330.nc' 'SHA256' 'a17cda7e14aa54bcbb97d6b7cbf2a000d61549e8dc3d99ffdd177624c9723174'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201101010030-201112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201101010030-201112312330.nc' 'SHA256' 'b7e8bd6c0df7a0aca77b0051b3097d7176d35e92d33e4bb0163b6fb45dc59372'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201201010030-201212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201201010030-201212312330.nc' 'SHA256' 'b3dda74dd3d0ace581e5f57cb72eeefa35bb423f00aac653c676fcd56be2dcb2'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201301010030-201312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201301010030-201312312330.nc' 'SHA256' 'fa86ac2198f59e6929130f3bd6a8520551071b0101492d961f8ffce6f957f319'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201401010030-201412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201401010030-201412312330.nc' 'SHA256' '983917aa448a7ec2447f8c5938c53b6f3546b7ae12ff672294f9c0340463ce36'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201501010030-201512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201501010030-201512312330.nc' 'SHA256' '50357959adcd00f446b9121668057b2d9be3c623a8283bb7a4e662a5e79c79a8'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201601010030-201612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201601010030-201612312330.nc' 'SHA256' '49721e8304557de6e988ccce70df2be44688a8dad6009a42b6ccd15db5e34b33'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201701010030-201712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201701010030-201712312330.nc' 'SHA256' '628955caf12d39eca949debf526f323a4d2f0fdbd19b0381eae8c903633bd6c2'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201801010030-201812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201801010030-201812312330.nc' 'SHA256' '69cbf1200219ca885ad3438e3c812edcfb63985e315756436cbde801caf7cde1'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201901010030-201912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_201901010030-201912312330.nc' 'SHA256' 'e523023d6602a307ba864b1f54bb6592da06101685f9f80d3d2510d38823ced6'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202001010030-202012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202001010030-202012312330.nc' 'SHA256' '473b687e9c5b5ca6608fcf2f228673aef51b44232f654ddd82f46a5b2e2a8b9a'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202101010030-202112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202101010030-202112312330.nc' 'SHA256' 'f0b0be794aca00143b31907f9e8df6a22de1dac2e4fc25a26ee425f3422bf55c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202201010030-202212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202201010030-202212312330.nc' 'SHA256' 'c1d5cb5f301453e02452880515a5ed763d8c9647767a6dcfb0aa5966d7402fbc'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202301010030-202312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202301010030-202312312330.nc' 'SHA256' '3b4ec916c577d81d12a95d1ff24c490a25304f21a55a4759ad85e4ae50a5556b'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202401010030-202412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202401010030-202412312330.nc' 'SHA256' 'f5f358f3efbfcdafd33b35c925f0ce93a3cb2b60306a9f27a6025081330ee797'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202501010030-202512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202501010030-202512312330.nc' 'SHA256' '6fd31ec68aa2b4972678b6dea279de012484bd0e452c72d339c0207e01dc0a31'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202601010030-202612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202601010030-202612312330.nc' 'SHA256' '6efb7961acd2e81e6523117619f3c6e9450ce7ac09bcf626b48f6b783a213e98'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202701010030-202712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202701010030-202712312330.nc' 'SHA256' '424e1d79132117ce61e433b66e81e51e85b7d3ee8fa33378fc62c757ce07fc55'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202801010030-202812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202801010030-202812312330.nc' 'SHA256' '2eee607287b1ba428e818125132cc3b5a525245cc6f560dbf266f14770c1a6da'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202901010030-202912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_202901010030-202912312330.nc' 'SHA256' '7d01234d0862e309c265946baed8fc017d8c17b921288802f325860611dfa829'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203001010030-203012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203001010030-203012312330.nc' 'SHA256' '0df82f75dc9c131517e28207275201ba99b193f7429b39c43b28a515349255c1'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203101010030-203112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203101010030-203112312330.nc' 'SHA256' '2a5c10dda6960642fea4f4e7f77cf27aef160e898f6fa508208b5024158dcfd1'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203201010030-203212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203201010030-203212312330.nc' 'SHA256' '4ec5b9a58e5cf786a4a1a8d69f0f17246b72aaedcec4ba0452b1c95ebfd4d186'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203301010030-203312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203301010030-203312312330.nc' 'SHA256' '6bccdff11972b263b9de8ed4f4f62d95c5aefa6233916d6981f26acef1d3cfce'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203401010030-203412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203401010030-203412312330.nc' 'SHA256' '06a2446ff2d5292a80717f2b6ac7e916b6043a93ea02f510c91fef6bd1f9c5bb'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203501010030-203512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203501010030-203512312330.nc' 'SHA256' 'd90051555b39bf056f452fd221a00ad709d753e30dc10ffcf50a50201a9fc060'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203601010030-203612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203601010030-203612312330.nc' 'SHA256' 'cc2680aa42ecfa7e0723f68f456265f3aa0dcf30778c2e5590e468b17a8ad4f9'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203701010030-203712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203701010030-203712312330.nc' 'SHA256' 'c1525cf094d7fd193eb05e986462d70bd64f53cf00c08a1e50ab0d349fe20fe6'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203801010030-203812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203801010030-203812312330.nc' 'SHA256' '807af4d2d25bdf1e0184c197afca8b5164647d2f462d5ae050a95858a6d25afe'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203901010030-203912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_203901010030-203912312330.nc' 'SHA256' '5d2442b381ce6d7594aa28126b4b66a89d4cc3e65df81977a0de597bfa688ea7'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204001010030-204012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204001010030-204012312330.nc' 'SHA256' '4e31267dddf6bf5ac4c27970f4af9c7d00c99d45402fd7c55fc591344df88f72'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204101010030-204112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204101010030-204112312330.nc' 'SHA256' 'ed928f3b101a47e156e08ee722c575226cabac96909605d4392ae2539ca3c87c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204201010030-204212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204201010030-204212312330.nc' 'SHA256' '7d3a62323c70d12ca69c8be29653b58090a9240551548348db3a25342dd71e4c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204301010030-204312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204301010030-204312312330.nc' 'SHA256' 'e842f6390fd901a427d5be26feb9d5a3a0357eccbeffb51c9f9ea5f5a93e9542'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204401010030-204412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204401010030-204412312330.nc' 'SHA256' '8f28d55ab91386dd48b5c4b32820e837f7ae17bef74a73b4909eded58950e9ce'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204501010030-204512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204501010030-204512312330.nc' 'SHA256' '1405d047b5dfb476d80b0c1ca991f9409f1d4138391401134e0274e51da47c7d'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204601010030-204612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204601010030-204612312330.nc' 'SHA256' '674374a53c7eb862a89f93e7836535e996dcb78cf9102fda0a9f58d336afe8e9'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204701010030-204712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204701010030-204712312330.nc' 'SHA256' 'd0d4507507565b6d2b85970a98e1344f6fbaf85d08f3ae9adf6d46c3ea00e761'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204801010030-204812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204801010030-204812312330.nc' 'SHA256' 'e932c15f5d6d9b4f65bbe3768375b41947644f1715426b2149460d4e22431902'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204901010030-204912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_204901010030-204912312330.nc' 'SHA256' '0ccd7b65d271e5360d14c3adbad8a2e4a851fe39928c478a0ed873cd41760df3'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205001010030-205012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205001010030-205012312330.nc' 'SHA256' 'd364ab4bc49ec0d223682be05d82a818bf84cff667b5f4b30a0357fb87787620'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205101010030-205112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205101010030-205112312330.nc' 'SHA256' '336da026b0bbeb2ab5efa06bfaab49cc19585c26f4967fb51653864753373fb9'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205201010030-205212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205201010030-205212312330.nc' 'SHA256' '60305752a7a7c1db28e36da3fb1f95923b4fd27499d029a540e08235ba7156c0'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205301010030-205312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205301010030-205312312330.nc' 'SHA256' '3219fcdb8f4ba2fe0c2ef60742ffaacfc7a4ba70ac647ad6120a90618a61e9f7'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205401010030-205412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205401010030-205412312330.nc' 'SHA256' '991f96985a877e2cb855f78295917569e2b7ab0aebb12802b0dca98d69f322fb'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205501010030-205512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205501010030-205512312330.nc' 'SHA256' '544256a3d11f94c84d9081f83ac3f7055dcf3d5ecdd026b9971154887aee62b0'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205601010030-205612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205601010030-205612312330.nc' 'SHA256' 'e45ba113a56972c57663aec118262dacd0989f5f25f85a130c342c0b31f0e31b'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205701010030-205712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205701010030-205712312330.nc' 'SHA256' '80d5491c29c5097826aa332f058eace68b9aa5066e54712c3af2ed6e38407a03'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205801010030-205812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205801010030-205812312330.nc' 'SHA256' 'e8c81609f4080b8ff4cbfb07bf83b4d9578ce36e345928093e1820325f123cc6'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205901010030-205912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_205901010030-205912312330.nc' 'SHA256' 'dcf6dda0a21e7808f0597fc898661ca27377eb5d64cc70919ae5ac250c545dc0'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206001010030-206012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206001010030-206012312330.nc' 'SHA256' 'a42f90801e81f85ee018a4271a4b25e0abca57835c0986f0461fbf22420ea16a'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206101010030-206112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206101010030-206112312330.nc' 'SHA256' 'eb4bb838369be939a31ef2407c0745168d3a6859ef36c0d624e05b7fbd4c5191'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206201010030-206212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206201010030-206212312330.nc' 'SHA256' 'd6970ed29b6fc6c252a3785d9514c05fb5fa057cd55538413a9c2999127033a9'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206301010030-206312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206301010030-206312312330.nc' 'SHA256' '4ec2fe4434366d65a199410a63962947af745b823ed1379c758699433073d9e1'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206401010030-206412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206401010030-206412312330.nc' 'SHA256' '39dd98a9cdb057b925729208b17b2033fe34eaaabd3226a7d724f11d0f4a69d4'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206501010030-206512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206501010030-206512312330.nc' 'SHA256' 'cff25b33cf0f3504a4e15ad7a3f2b812a3d1010dfbe4d4bd9178fcf0e77940fe'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206601010030-206612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206601010030-206612312330.nc' 'SHA256' 'f8290d558f605ffeb5cdd0f6f2d392c342866ca6f6276bc5859eb2ff3615b5ae'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206701010030-206712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206701010030-206712312330.nc' 'SHA256' '2127efc76cbd64e50df9cbfccee6cc135f341196faab47dae7d8121b5c11c7f6'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206801010030-206812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206801010030-206812312330.nc' 'SHA256' 'de78cf1dc52aa60dccfc3dd5822646fa12dd80369f8d57d23981a1672ee121c4'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206901010030-206912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_206901010030-206912312330.nc' 'SHA256' '8ce2ad23471548962ebf16b3081698a4e6aa386312bc3534851bf8009e1e60d5'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207001010030-207012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207001010030-207012312330.nc' 'SHA256' '0988f40483438d6a82dcee824f921fc972b00abf2ea162fbb1e7742ea0c2c7b1'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207101010030-207112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207101010030-207112312330.nc' 'SHA256' '681337b2f5b8c6dc838192582c223685be11b62359ce27e2a4ec8f54f971a051'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207201010030-207212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207201010030-207212312330.nc' 'SHA256' '82948ea93b95f30cd4c86b601ee3e37840fa6973e1726b479893e1a7848ee11a'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207301010030-207312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207301010030-207312312330.nc' 'SHA256' 'a6d19fc08466e98915276c976b490ec7f5e7769cb80b28c00da0c7c53174677c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207401010030-207412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207401010030-207412312330.nc' 'SHA256' '5e735e0bbaaf15c259a6265fe40050be60432de7463b8a41b4964630a3996a32'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207501010030-207512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207501010030-207512312330.nc' 'SHA256' '041a01da3b71065a7d4b14f19302508bbe16ebc180138d3e434ed53b385c6082'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207601010030-207612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207601010030-207612312330.nc' 'SHA256' '555eb06586ab0eee2a57faee1fe2ea39355d23f847215dd734a07810e9220aeb'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207701010030-207712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207701010030-207712312330.nc' 'SHA256' '4eb753e5abf0e7e9f8649eddc38692f4874c63e0c80332e01d259c87d1f78a50'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207801010030-207812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207801010030-207812312330.nc' 'SHA256' '854d059553c50f22993a0a8b896dec172c79e7bd5ebb95b84c5316f6050e2786'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207901010030-207912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_207901010030-207912312330.nc' 'SHA256' 'a7f88baf486c05a80e3dfd6067bd669bf735a1bbb611df78d80a0e6f7f65012f'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208001010030-208012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208001010030-208012312330.nc' 'SHA256' 'c7085842b6ac11d346bd755ce158ae727ebba618095c761c8000f492094231ed'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208101010030-208112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208101010030-208112312330.nc' 'SHA256' '71f3811856cbd406c1fdcf2f0529938f993723c43c0f66cbf0cb3e67062c70b1'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208201010030-208212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208201010030-208212312330.nc' 'SHA256' '8da2eabd156ba1650c9ed902de6eda60d3fcfae510dce8a4f01194224a61aded'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208301010030-208312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208301010030-208312312330.nc' 'SHA256' '658e45b83997a696f14d11445194b000ffdc56072142edb623c476940de3bf42'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208401010030-208412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208401010030-208412312330.nc' 'SHA256' '7dec87dae09bde907fbccd0a8b643a556cb4811f17eee08789eb64f2a23ec439'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208501010030-208512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208501010030-208512312330.nc' 'SHA256' 'df4669db689003ae9a4e4688ac795a948403da81392d0200ff7030e58b9ff947'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208601010030-208612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208601010030-208612312330.nc' 'SHA256' 'c4fabfcffc0a2f81b60af836f67c722984843571f0a90c1f8f152a5d856ef7df'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208701010030-208712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208701010030-208712312330.nc' 'SHA256' 'e498d45c545dba7a8f03c4c19d831a9db4a90f09ce438b2938d3b6734d71eb8e'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208801010030-208812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208801010030-208812312330.nc' 'SHA256' '740f9a2a064f26eae5cdf9eecdb1e335b4d5a9d7ca9d2eb56962905bd6ea072c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208901010030-208912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_208901010030-208912312330.nc' 'SHA256' 'ca111f3fd84ea101ad87cacab50f997f38eefbde8e6446deff19c2569a5d0e8f'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209001010030-209012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209001010030-209012312330.nc' 'SHA256' '804722c6ee581707f6ef4e3430819ddb5dc3442ee5ea70b6ed0116bb41f17d07'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209101010030-209112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209101010030-209112312330.nc' 'SHA256' '03180938106dc26304803faf4a91a49c68d5dafa49a591cf0e6e625daff2e4b4'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209201010030-209212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209201010030-209212312330.nc' 'SHA256' 'a014966c3c8a19c36d2439c0255827ebb6eb4eae98a8ca2ecb8b4155576cb1d3'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209301010030-209312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209301010030-209312312330.nc' 'SHA256' '3a278dd1ab46e447e570f81fab1124d5cb4a21da54e4ff5bb67c846b06f441b5'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209401010030-209412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209401010030-209412312330.nc' 'SHA256' 'd0c220d4daf0604ed96c9d49059b965f0e388e0ec50573f33f1dde29e663e2a3'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209501010030-209512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209501010030-209512312330.nc' 'SHA256' '6499cca76b7eddbe94992c58315e04cb9a5f36026eaa96556d2d78da91e72047'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209601010030-209612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209601010030-209612312330.nc' 'SHA256' 'a8591d9c9890ada7bf42feedf74db3811e337dbd1e7aeb5813191b06dcc254b9'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209701010030-209712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209701010030-209712312330.nc' 'SHA256' '0d6f7c0dab073621e9a1214cccaeb070a58ef1e626b1916362c2ab1100f3accc'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209801010030-209812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209801010030-209812312330.nc' 'SHA256' 'db46ade7396d241a7ac9f767a36eeaf757b7ed90ffb54fa46c6f0409a9f5ae2d'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209901010030-209912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_209901010030-209912312330.nc' 'SHA256' 'aef7bb457e2148dadb2a844c8c4da69b4cd2399cbaaf26c3987d3de5df3f5639'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_210001010030-210012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r1i1p1/SMHI-RCA4/v1a/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r1i1p1_SMHI-RCA4_v1a_1hr_210001010030-210012312330.nc' 'SHA256' 'fa62ab1a9c0ac21cdb045786a8459328dd0bc3ed69b55a181eb1199a46013d5e'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 95 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
