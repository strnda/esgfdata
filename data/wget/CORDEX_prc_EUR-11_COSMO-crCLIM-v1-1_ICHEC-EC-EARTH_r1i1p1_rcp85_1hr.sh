#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-data.dkrz.de - 2025/02/13 13:31:10
# Search URL: https://esgf-data.dkrz.de/esg-search/wget?project=CORDEX&variable=prc&domain=EUR-11&rcm_name=COSMO-crCLIM-v1-1&driving_model=ICHEC-EC-EARTH&ensemble=r1i1p1&experiment=rcp85&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-data.dkrz.de/esg-search/wget?project=CORDEX&variable=prc&domain=EUR-11&rcm_name=COSMO-crCLIM-v1-1&driving_model=ICHEC-EC-EARTH&ensemble=r1i1p1&experiment=rcp85&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200601010030-200612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200601010030-200612312330.nc' 'SHA256' '497612e0f7943577643bc422bdbe0fd3706404e94e064aff9c774a79a5e3430c'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200701010030-200712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200701010030-200712312330.nc' 'SHA256' '7d051824447db8a82f0a82ef4564b59d1cc937163f205f0356476a8ce914706d'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200801010030-200812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200801010030-200812312330.nc' 'SHA256' '49c2b7b2a68242d920443b6f624469116426874c48b1c1dd01578eb056649b35'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200901010030-200912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200901010030-200912312330.nc' 'SHA256' '2e5d8c1b2e151887d42b7fa449d9abbf7c76edc92ce10aec99f1d08b45418620'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201001010030-201012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201001010030-201012312330.nc' 'SHA256' '5bcb385e019c51c5e99892c9e7046fff8c61abd511f02f88d5bb83789f9c65b0'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201101010030-201112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201101010030-201112312330.nc' 'SHA256' 'ed7f4f5aae0ad95535ff3885b637f4a84b65edb1953d23eb746dc5fecbaa22b9'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201201010030-201212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201201010030-201212312330.nc' 'SHA256' '875beb0826e21814570762655c4aef6e86383782bd28da9782520788eaa6b8b4'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201301010030-201312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201301010030-201312312330.nc' 'SHA256' '1654ef579c87925c8c1ed431d9109318a101345889834477a30d21dc26c03c9f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201401010030-201412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201401010030-201412312330.nc' 'SHA256' '70f59289684d7f08d261ee349f165104c850faacb4bca42e66423d6e1045995a'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201501010030-201512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201501010030-201512312330.nc' 'SHA256' '3e552976a0c987aaf50d90edeb13fd5cc265a446001fdec33a83fee3a78e7ee6'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201601010030-201612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201601010030-201612312330.nc' 'SHA256' 'cbfc23855c6034c458d98c102455ac68e39d0af39497c85920591cff86b4dd2c'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201701010030-201712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201701010030-201712312330.nc' 'SHA256' '574911e537acabbbc0e59bb02ec02ec2f5641dc0293197815cd725c5ddcfc56b'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201801010030-201812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201801010030-201812312330.nc' 'SHA256' 'be84e1781dfa8ec6e61f0558b8813d2d1a3d10c095bfd32ccc5db0f5f63e9d8e'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201901010030-201912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201901010030-201912312330.nc' 'SHA256' '931b4f15a0b3381d67c6fc6b97a2c31bb1f7f68730a55ed2f71c6f062df2168c'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202001010030-202012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202001010030-202012312330.nc' 'SHA256' '55c8ff0b2c094564b07ff67b0a034a1adc9a5a59b0bfd136ff81e36446e18905'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202101010030-202112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202101010030-202112312330.nc' 'SHA256' '6b4341f0f558c4298722842e9e9545600b8e6378b36e4b19a87fedeb2cdfe42a'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202201010030-202212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202201010030-202212312330.nc' 'SHA256' 'a059daaa71f16b6a49ba70c88bda7afb3780b61a909434921a828946275f4839'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202301010030-202312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202301010030-202312312330.nc' 'SHA256' '98d656e9fe6b7b2e4dbb2092fd4c790f250e49608f40e4965419fe20696cf9d2'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202401010030-202412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202401010030-202412312330.nc' 'SHA256' '0d2b8924ca2cfab7335436d09161f353b7c79822bc9228d8252dcbc576187929'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202501010030-202512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202501010030-202512312330.nc' 'SHA256' '01c350cf028ab6d4148613fee62634bb15d50287cd2c34081cf9ea561734eb28'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202601010030-202612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202601010030-202612312330.nc' 'SHA256' 'f0ba667f79f6aac2012370858fc2d202b173b662a041aa713556c0fdb625af08'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202701010030-202712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202701010030-202712312330.nc' 'SHA256' '991c2b3ca2ac98602840f30cf2789974e60eb75752277ad2b032d4c28ce36bcf'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202801010030-202812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202801010030-202812312330.nc' 'SHA256' '5b93579d73855f10404056c10967b4a9b882e65e40d9e1307cdf8f166fd4940e'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202901010030-202912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202901010030-202912312330.nc' 'SHA256' '286fda002eacbdd1cb076cd7a4be06d3b8f7755df82a051b7cefbdfa03a121a0'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203001010030-203012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203001010030-203012312330.nc' 'SHA256' '5286a8734970078bf41927af396d32fc9944b982f16253747056d71278127557'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203101010030-203112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203101010030-203112312330.nc' 'SHA256' 'e50ce43790ff4a613fa6734a5ead6428bd5df6b2d0b767bb83ea3128399c8801'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203201010030-203212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203201010030-203212312330.nc' 'SHA256' '4b15a2071c53a87ebb2c2176bd782085b0fd6ccffa71db73698aa40486b20ac6'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203301010030-203312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203301010030-203312312330.nc' 'SHA256' '4977fc716e6ca462980063626a3507a37a0b98d20b2316534058a1fce945c17b'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203401010030-203412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203401010030-203412312330.nc' 'SHA256' '3e07514ced99ecc643dac78d03990706348963cc0e30d5d91d8b16109f9f2e2a'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203501010030-203512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203501010030-203512312330.nc' 'SHA256' '51e646c7e56814db7bfc2934ec482c4c17c9a75f20325ebb668b86e59b51691a'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203601010030-203612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203601010030-203612312330.nc' 'SHA256' '3d38fba88acb2773b5337620d7327134109ed43155262fe13253982839e75abc'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203701010030-203712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203701010030-203712312330.nc' 'SHA256' 'b22a9df45e99df0420320303e2a96c104ff408550f9e0e6cfec7436c1790bbf1'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203801010030-203812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203801010030-203812312330.nc' 'SHA256' '74c531693a4173992fffdcf0afc56414d4fce097a8d888aa251e78031cbb0201'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203901010030-203912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203901010030-203912312330.nc' 'SHA256' '45fa324387f865b688d629895df9518a5e64e29633e4ad421ffcf4857999f198'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204001010030-204012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204001010030-204012312330.nc' 'SHA256' '6b34e492a38052d5e7f0687e0ff12ef42ab1e8141147e949f1ed26075fb2f743'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204101010030-204112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204101010030-204112312330.nc' 'SHA256' '4b3ad00cc0774c68d6c5f340de4cfa4ac69c87c65c766a766bc0f3188eb63ab7'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204201010030-204212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204201010030-204212312330.nc' 'SHA256' '17e684151a7a4a171c7dd1efe954443c1ae2da58db7c2e54cee139fcc42bf80e'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204301010030-204312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204301010030-204312312330.nc' 'SHA256' '4ab2c9f500ad51e8807a9a385e59a6af6916b8d3f506d1c3a601030ced0cda92'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204401010030-204412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204401010030-204412312330.nc' 'SHA256' '1056636157391f1c33c2d9c2d184ff34f321af10ec16fe49755ce318aca9d568'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204501010030-204512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204501010030-204512312330.nc' 'SHA256' 'd5f7ca9089b23eec502a812875c9d8e0c7029eeb5cbe2aad37eefad84cbe14d5'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204601010030-204612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204601010030-204612312330.nc' 'SHA256' '470e5945f41a174a0e00a9f90fca03b4ac4901cf5e8aceff57da1dd0b8af7de5'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204701010030-204712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204701010030-204712312330.nc' 'SHA256' 'cee8ecfb594b66b9dff387863cbab6fc5450b7a189243c9ab532b12daf3c7786'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204801010030-204812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204801010030-204812312330.nc' 'SHA256' '1ebfe29e49e539a0b7fd1bd24f015db5ba22b35627752753efda9ab262e1ae12'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204901010030-204912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204901010030-204912312330.nc' 'SHA256' '8224a39e207a301b0e8c36f7d5f3ef998cb7c1bfa1a157b1fa8a622b3f961eac'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205001010030-205012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205001010030-205012312330.nc' 'SHA256' 'd31a752583f0b50aa38682e9a9c430b203680d540bbcf45a5cda5e189203fda8'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205101010030-205112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205101010030-205112312330.nc' 'SHA256' '40a033cdcf07489abb7bba0b790a4de6ee9e7e7b0635da9005d7556783dbd293'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205201010030-205212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205201010030-205212312330.nc' 'SHA256' '402862d95ce2cf50acef48d00f1d55f94740444c2a10679764e4276b3fc6d66d'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205301010030-205312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205301010030-205312312330.nc' 'SHA256' 'eadebd554a115e5fb92b21077e258112efb72ed98d592276b0acce69215406ca'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205401010030-205412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205401010030-205412312330.nc' 'SHA256' 'afc78778a1270380d2135aa87bda5ffeb49807495f9b2b2e4d1385540e2aec58'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205501010030-205512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205501010030-205512312330.nc' 'SHA256' '5db4e50f0952e41570405a06670f015d4210c0929fe8e227e0a5d6360d60a45e'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205601010030-205612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205601010030-205612312330.nc' 'SHA256' '54a332d45b25c5e295962041deed12cc761f2d13a2c5c98aea5be1e2a616cf55'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205701010030-205712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205701010030-205712312330.nc' 'SHA256' '2ef245d60d22ce3d89f638b95fadc814f8f7573a132dfc007bb00c58d116d641'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205801010030-205812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205801010030-205812312330.nc' 'SHA256' '5ea696b9155fb2b61ae8fc3ac5c7e0719982618b2b0bc22fda7eaa414e3faa1f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205901010030-205912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205901010030-205912312330.nc' 'SHA256' '91a3a5dfda1a511a726cc1a7977d077efe3b6e91316739a8d6947308655b3eef'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206001010030-206012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206001010030-206012312330.nc' 'SHA256' '109fc2df0e250df1d384a9154909780f887c017c795d119041809e0fba94b84b'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206101010030-206112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206101010030-206112312330.nc' 'SHA256' '53309c5dda44f5603530940a7cec508ad4edd09614dd857fd1f4a8e6bb1343be'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206201010030-206212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206201010030-206212312330.nc' 'SHA256' 'f4f6c525e159d122ebd50f61ca553f43792f1a9deab0beefccb19e7adb5d1a25'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206301010030-206312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206301010030-206312312330.nc' 'SHA256' '1cfd705299d7c977fee359c68bc6cf0462d6ff091e8181d721c0ed0e010f872f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206401010030-206412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206401010030-206412312330.nc' 'SHA256' '31f26fa4a4f7c3ee4d96674ab963a473c9c1371b18345e785cace1faab197a21'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206501010030-206512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206501010030-206512312330.nc' 'SHA256' '6c7dac6bd80c88955a3870d8c5368e555aa003822a3c020bba989e3cfd2bf7bd'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206601010030-206612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206601010030-206612312330.nc' 'SHA256' '844b5ea7795e014e2ef3c3ef30d02a7afa7589448d300820afeac1cc772e2ab5'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206701010030-206712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206701010030-206712312330.nc' 'SHA256' 'e698898b3c4d74f57a4059793dfdaf527ffbd034378a59837570f5d0d206e6b9'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206801010030-206812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206801010030-206812312330.nc' 'SHA256' 'd01f7d75861a500f7621fa0ddaf2ce96f7e0835db91795b1d6b94e5bf776cdac'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206901010030-206912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206901010030-206912312330.nc' 'SHA256' '830574fc143fd8f72cb77c9242e26b3398525db4691cce7d26f4044a34f3f319'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207001010030-207012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207001010030-207012312330.nc' 'SHA256' 'e84f34175ed352a6abfec89d527763e377ea08bd8a3968d8d9b5d289824c97d7'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207101010030-207112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207101010030-207112312330.nc' 'SHA256' '0953952e0312166d3cb6d406acb2710ba8edef397285c6e8985ef10dc50c7281'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207201010030-207212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207201010030-207212312330.nc' 'SHA256' 'fde452b21ba2d64cfc9a096ca2ed59e31cc111781e205a1e896d2f8bcccd2741'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207301010030-207312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207301010030-207312312330.nc' 'SHA256' 'ec5035fd14b313e8cc7b1c6b1486f4cfef693e094c7030f934dbe9a8fa4b3344'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207401010030-207412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207401010030-207412312330.nc' 'SHA256' '75fc4fa597eabf6253c4e224bc758fde706b8c0c4a7eccb63fe5837ee7665355'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207501010030-207512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207501010030-207512312330.nc' 'SHA256' '1e630b965b800290fbe809701c9c8f1b90764977bf9e18112968b516bbd01e10'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207601010030-207612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207601010030-207612312330.nc' 'SHA256' 'cfd46e4cf67f117a3c1ecc276179210dd8596644361530188ad7329e1aa4c9a0'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207701010030-207712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207701010030-207712312330.nc' 'SHA256' '6afcdc7272aa2c566866bd9e02b8ecdc82e0127cd2cc31cae2a5916c030de324'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207801010030-207812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207801010030-207812312330.nc' 'SHA256' '5fb3e66a079c6cbf334e5f8c57cdb7dc4750e98088626e894292f2e2b4a480f5'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207901010030-207912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207901010030-207912312330.nc' 'SHA256' 'd55b3686e5e71553076f1c5ca8f1801d346706f20d7792322aae3bbeb7abd20f'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208001010030-208012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208001010030-208012312330.nc' 'SHA256' '0f460015289b48ceefbb3765f1e0f80ea466e671fb65fe486fc894dff8e24649'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208101010030-208112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208101010030-208112312330.nc' 'SHA256' '3c3e1a214ce5072ff4fcd6e0f85591f86a7126ddf624ec5af46e5b1e5d06e5aa'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208201010030-208212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208201010030-208212312330.nc' 'SHA256' '2d925c6ea1dbbe7a6bd398b43008c364df11b3188bb2898e0eae2dc902f238fd'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208301010030-208312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208301010030-208312312330.nc' 'SHA256' '1fd4adee80f04dc4f3581666b8755b26834ea7af7d12ce8dbefc4242a12d0e45'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208401010030-208412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208401010030-208412312330.nc' 'SHA256' '07621d97e26f6f324d0756d4875da9eadeebf524555af6a0cafe4def77dbb8b6'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208501010030-208512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208501010030-208512312330.nc' 'SHA256' 'a70d2c4692dfcfbb8395713857a4e6071614fd2059ff4046e7401566ca924778'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208601010030-208612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208601010030-208612312330.nc' 'SHA256' '48ac6018d53d98ecea269378a13d8e488a8212cd1da83c73a5c0266400b62e54'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208701010030-208712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208701010030-208712312330.nc' 'SHA256' '85781452df69ab309d9c965d62cd4b689f86dc2cf1a6becf1456eec48c732a9d'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208801010030-208812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208801010030-208812312330.nc' 'SHA256' '17514cba57b4c28b0107a1d2536df8ecba6db4e9f69f5821caa8a01ecb7bc61e'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208901010030-208912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208901010030-208912312330.nc' 'SHA256' 'c3d06479ff1286fee2a55b8601418cc341c009dd2f4f3b2d3bb9db941743dfe5'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209001010030-209012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209001010030-209012312330.nc' 'SHA256' '70dc6746b4d92c85fe3665ecb2846b6c854fde24e0e5ebd505260e0057389e2b'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209101010030-209112312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209101010030-209112312330.nc' 'SHA256' '8dc08073fcfcdfbfb1ff8cfa013f120d1fcc25f77619f2a49cb6f7269c908339'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209201010030-209212312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209201010030-209212312330.nc' 'SHA256' '9d1baff0a7420c8bc8c34121d86cd9daa2530a363090af705fece4a07f06203e'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209301010030-209312312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209301010030-209312312330.nc' 'SHA256' '43a3d8bde76e97dcb6b7f6e167c00d8f0af544855997fd2610ebdd8df59e4cab'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209401010030-209412312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209401010030-209412312330.nc' 'SHA256' '9915d2458dd9ee5e521d46752e3654b43105a82ca83b8dd856c3f80f34b1ff20'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209501010030-209512312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209501010030-209512312330.nc' 'SHA256' 'e497225ff91d0dd0114d491556fd7a6ca60a8104c520bc9e6d84b45e79116cd3'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209601010030-209612312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209601010030-209612312330.nc' 'SHA256' '4f2c96a8909c763c2e12605ef9c55f801668baef1845161f18e126dae5f54eab'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209701010030-209712312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209701010030-209712312330.nc' 'SHA256' 'f8ce354f6d1fda153d84161f87edd754b05fb4f562a3c86fb3e565d4a90d0d31'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209801010030-209812312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209801010030-209812312330.nc' 'SHA256' '371e6bc6470f022e0079c7b5d28cf2f8e2170232f1803c0fc01c454ef866e63b'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209901010030-209912312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209901010030-209912312330.nc' 'SHA256' '38aba708b9759f4d00024d81675aa8ef0047d2f2f1091a816d36f5c9836ada87'
'prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_210001010030-210012312330.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r1i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/prc/v20210128/prc_EUR-11_ICHEC-EC-EARTH_rcp85_r1i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_210001010030-210012312330.nc' 'SHA256' 'a904e2df08bfd76ecf192572ada65afea531008951fc119a724ef71c0601598b'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 95 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
