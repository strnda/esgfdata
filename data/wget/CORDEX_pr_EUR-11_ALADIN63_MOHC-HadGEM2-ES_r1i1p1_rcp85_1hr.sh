#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/11/27 05:01:44
# Search URL: http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-11&rcm_name=ALADIN63&driving_model=MOHC-HadGEM2-ES&ensemble=r1i1p1&experiment=rcp85&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-11&rcm_name=ALADIN63&driving_model=MOHC-HadGEM2-ES&ensemble=r1i1p1&experiment=rcp85&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_200601010030-200612312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_200601010030-200612312330.nc' 'SHA256' 'ddbbf7dea5c52c646d88387c7b9311b717f6227f768d2750efbcb04433b98510'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_200701010030-200712312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_200701010030-200712312330.nc' 'SHA256' '9465c0ceeaec2b48150f77098f62b44461f302fcd7e24111562c2983df95b0a3'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_200801010030-200812312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_200801010030-200812312330.nc' 'SHA256' 'c22718c22be80248d67e80b663024bd526876d6debdaac3e4d3293eb7204ed59'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_200901010030-200912312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_200901010030-200912312330.nc' 'SHA256' '69c1b7c5493c31412fc4715fa64b584b798462dc004dad4d0f525f2a1fff072a'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201001010030-201012312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201001010030-201012312330.nc' 'SHA256' 'abf46b7147015178b6e1a03d9421b4af6e170ed34e9a86f5b4d720dd8965a80c'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201101010030-201112312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201101010030-201112312330.nc' 'SHA256' 'a812d3db1723f9cdaf6d5643ac864910120d9c4fe2635f869e80d9841838ed89'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201201010030-201212312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201201010030-201212312330.nc' 'SHA256' '8be3bd69d5a14b654b9ed85897b7e89a446e93d2016ac05ed2c19ad7755e607e'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201301010030-201312312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201301010030-201312312330.nc' 'SHA256' 'c3b8230c0df8a93335bfc5f2b897b2aa14e1518722f0670deeb407755ab1d61f'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201401010030-201412312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201401010030-201412312330.nc' 'SHA256' '9a33b178e3d3edfb4f3512294671404b4e3e60af893f0516f18e2d4f4d25698a'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201501010030-201512312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201501010030-201512312330.nc' 'SHA256' 'bc27f67422c3ba111b4fbea92ac28b03d42a97855204edf5566027d1ceb9bf22'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201601010030-201612312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201601010030-201612312330.nc' 'SHA256' '49b60cb0396e23575c4ccbd1623b58e27021c435ff5cefa35263d7b7f515890d'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201701010030-201712312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201701010030-201712312330.nc' 'SHA256' 'db3cade8adca97d51b5acffa14ba80bbbd1127c8906ff7c2b64f56ebe21554bd'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201801010030-201812312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201801010030-201812312330.nc' 'SHA256' 'ee8ecc952a25196c49f2f6127fc751d619dad899b0a5d8106af42a8036064bb8'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201901010030-201912312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_201901010030-201912312330.nc' 'SHA256' '5219391a6037525e01b3e0b5bd7f842424b8366a52c3ebf58cef0d28616b602a'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202001010030-202012312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202001010030-202012312330.nc' 'SHA256' '24baf4c90026c2925abe374f9fbe04963a71d5da89973fec7543d2ba90f34e50'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202101010030-202112312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202101010030-202112312330.nc' 'SHA256' '653ac1680a0af6d9b8a1e582237223bea958ef012c7e0c043117842510d42096'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202201010030-202212312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202201010030-202212312330.nc' 'SHA256' 'c2a2e74ddc9bb3d858d137a07abb903034dc5638e37acff310e0ac60d5a36f32'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202301010030-202312312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202301010030-202312312330.nc' 'SHA256' 'b389a8acc04b646389f1185caab84c966357247ad4f50536bed47a02a6719d67'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202401010030-202412312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202401010030-202412312330.nc' 'SHA256' '11466125d79dd83f0594dbae49dae4ad39d8a11d03de2a136567da0d3f5969bf'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202501010030-202512312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202501010030-202512312330.nc' 'SHA256' '91203adb5382bc665734640f30d31c621aff7602400871fe0e8ef1f8ce346545'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202601010030-202612312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202601010030-202612312330.nc' 'SHA256' 'f57cb46b691d2116b85376931d9fcd3c171d0e8d65b77ad8c6c13286a3b76e90'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202701010030-202712312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202701010030-202712312330.nc' 'SHA256' '0ceb37fa5ac0133bfe8e42dd0b8e5a64bc78aafc17d08dae3c1a7eb755dbc5f4'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202801010030-202812312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202801010030-202812312330.nc' 'SHA256' '63bb3f0b9b520eda43aa21d5945e28570b9feecf9c41cbf3b2ef25a0e87989bd'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202901010030-202912312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_202901010030-202912312330.nc' 'SHA256' '8a55834a2c8d7420fae1d610f625f00fbc0f09889ad579ce149793530407469c'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203001010030-203012312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203001010030-203012312330.nc' 'SHA256' '2de52316b28cdbb8ca8699d3c193377ff043c2a5d3d985015e7e9c03f5463c61'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203101010030-203112312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203101010030-203112312330.nc' 'SHA256' '3171ff35378eed4e895b675111d968073817cb72990cfcb51a46971886fbb43c'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203201010030-203212312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203201010030-203212312330.nc' 'SHA256' '83fceaf8408ccb479b000df7953f1c338996c6b95c85184bc51ed54b66378d92'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203301010030-203312312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203301010030-203312312330.nc' 'SHA256' '246a4fafaca8b46f81892fcf606a93fb93006ef0041e76d27f94d8b78049c655'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203401010030-203412312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203401010030-203412312330.nc' 'SHA256' '40edb1fb0af6e7fc9706195ddef3159fd6c5e0c0864bff319bcd325fb0343ab5'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203501010030-203512312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203501010030-203512312330.nc' 'SHA256' '70c439ce3bde327537bbb7635fa939684c827d614814939635a0d4c453a41fac'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203601010030-203612312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203601010030-203612312330.nc' 'SHA256' '02853f29571530ad03be3e42e2bd779fc54759c70c2c185ef230f1306140ffc3'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203701010030-203712312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203701010030-203712312330.nc' 'SHA256' '42137076c735f6417c18b2f9d1bc7505953f09707ad6a897261de0136a78a68c'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203801010030-203812312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203801010030-203812312330.nc' 'SHA256' '194a4640e89f1b55c483ef966697cd9c6043138e30ffd27e418965fa4eb9e1a1'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203901010030-203912312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_203901010030-203912312330.nc' 'SHA256' '78e62210f1b76d6e37002a9c86aac101c916fa07c4da80140d796d4e98020c42'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204001010030-204012312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204001010030-204012312330.nc' 'SHA256' 'f57da2fcd6bb0149b4a0ac43efec1bb9e55aa2e030b70807f52c47506574ae1f'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204101010030-204112312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204101010030-204112312330.nc' 'SHA256' 'dd96d0bede9d43bbe34d48c05205207fccac42ef43ea844c7c42b7f406ce8e6d'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204201010030-204212312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204201010030-204212312330.nc' 'SHA256' '9990c4028581ab0cf4377064dc2fbd239c239156b110bf0fc4824fa97185e811'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204301010030-204312312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204301010030-204312312330.nc' 'SHA256' '206dc4a3b77f74cbede8585d78d21b87cf7b2bea785a26c3567c7cca73149f95'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204401010030-204412312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204401010030-204412312330.nc' 'SHA256' '2ddd6df36ce617372a6676af4cff095788088fb7506bedd7c75c572742178e97'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204501010030-204512312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204501010030-204512312330.nc' 'SHA256' '9114e816bcea73144df7588f2a3720d30b420b43f9c579232d073900de9cb873'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204601010030-204612312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204601010030-204612312330.nc' 'SHA256' '9988b9d8e008dadb9ebe60402396df1f650a3736430bcf4188960e67750bff6b'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204701010030-204712312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204701010030-204712312330.nc' 'SHA256' 'f5f4fd71194d604406cb1dd5621757505d9b7b5a7e5bf16a8fd1aa330b03ed53'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204801010030-204812312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204801010030-204812312330.nc' 'SHA256' '54d562a22f28d48fd8dcba1a0b0c6e9b4d1e567a171dd9600cc199b064491aa6'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204901010030-204912312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_204901010030-204912312330.nc' 'SHA256' 'b3e61469302240eb49c44e3c51dde3420e0710f28f9cd1d5e4334bdaa6bd408a'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205001010030-205012312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205001010030-205012312330.nc' 'SHA256' '48035a1db37a57c920769a912fcb7ed00df4769e3fb8ae5a40ddb260f3908b81'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205101010030-205112312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205101010030-205112312330.nc' 'SHA256' '77e2bdbd90751d09f5815b6437a4b761a8c57c64b0be1d095086a0885ca56096'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205201010030-205212312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205201010030-205212312330.nc' 'SHA256' '4b8378c724a126b9e3c6a64a5690f2c81985831f57a7c759d7bd6eb41f333d97'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205301010030-205312312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205301010030-205312312330.nc' 'SHA256' 'b805c77fc1244771047a9b5e78818cb2446d50e2df6455980bc14c63db371015'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205401010030-205412312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205401010030-205412312330.nc' 'SHA256' 'a77cf8bc39c840e07bab19632d2fecabb7c5d46eefcf12f28d52a3dab89174ea'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205501010030-205512312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205501010030-205512312330.nc' 'SHA256' '1cce3343131d9109c48b0fa4e8cbda872a2c74b5543767a515a6e21507c874b3'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205601010030-205612312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205601010030-205612312330.nc' 'SHA256' '9e8791ca742d84e9ee5b794b1b486fed611cd2ab451e4ed5f0abbbc521207600'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205701010030-205712312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205701010030-205712312330.nc' 'SHA256' 'f2eb16d1b0d1b5fcba0008fd2034f80245f7e4ac23befffc79ba919d006b3e4d'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205801010030-205812312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205801010030-205812312330.nc' 'SHA256' '1cc59d2c902de6db9677eadcf00392143c5ddfd0450cb95d24709a6ede6140d9'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205901010030-205912312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_205901010030-205912312330.nc' 'SHA256' '63ad2a1e06eb7d6780cc2510f9f1240b0b2eb44849cc2daa4ac3b08c7ade11f4'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206001010030-206012312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206001010030-206012312330.nc' 'SHA256' '606b62a81bba6999a1acd4d7bad99e0bf32a1339c1d4ab9db6e5de258e0b0fd4'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206101010030-206112312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206101010030-206112312330.nc' 'SHA256' '56519f7518e543c870b9b67fd4e4c1386a33182b6b0b655d986d7b366e020948'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206201010030-206212312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206201010030-206212312330.nc' 'SHA256' 'aeda50744f438ae43b04943fc6f39b79def6a0661fc308b7a57c15396d01cd98'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206301010030-206312312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206301010030-206312312330.nc' 'SHA256' '5388950efa37241fc285f695ae63ab2cb4f9f78dd743b803e95248c8b8f2b2ea'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206401010030-206412312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206401010030-206412312330.nc' 'SHA256' 'cff03eac9b7cb714b68da39f27cfe828580bbf2e4307f446f7c44043635d7908'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206501010030-206512312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206501010030-206512312330.nc' 'SHA256' '6da99dbf7ec2021a2e0268a6c5e8d3c0584ed0d8a4ebbdf431c2960746f132b3'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206601010030-206612312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206601010030-206612312330.nc' 'SHA256' 'adf04e278f2be4a6b32aad8e529a16f38b256f4a3f9cd2e06a31a18f40e209a5'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206701010030-206712312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206701010030-206712312330.nc' 'SHA256' '93993fa4ae198ef51300165bacf8c743a09b6aa9eac9c4d3f347c98eb51f623d'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206801010030-206812312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206801010030-206812312330.nc' 'SHA256' 'a3d9eee421853e160163f6f468c1af2baf20fe7197dac9f89c7559846b1db1e1'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206901010030-206912312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_206901010030-206912312330.nc' 'SHA256' '33c43fb21ab6517851348b73860477303816a3b9ce166a81104564969909e1d6'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207001010030-207012312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207001010030-207012312330.nc' 'SHA256' 'fd4a6a9757f370c99307de290de7809ff01b5019be2b896a52bf3c9f5f24105d'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207101010030-207112312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207101010030-207112312330.nc' 'SHA256' 'd145655765910e77cf00deb04e78569fda2d8cc54dd488c05921c97d09f151fd'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207201010030-207212312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207201010030-207212312330.nc' 'SHA256' '649773dc15a532964a07868d7b15551fd9ed1bb28003621c3c2ecf3df5a005a3'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207301010030-207312312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207301010030-207312312330.nc' 'SHA256' '421576364fdcbf97b0307315383fa968f496339f52ed68f458444ecb93b2c61b'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207401010030-207412312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207401010030-207412312330.nc' 'SHA256' '0076b993124c1fda2997b6a565de0b7b7eb4a425c533cd8b9f11a45554ad03f6'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207501010030-207512312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207501010030-207512312330.nc' 'SHA256' 'be08faadff6e90600aacfbed389954f414440ec1c5379744a4ab33787e80f003'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207601010030-207612312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207601010030-207612312330.nc' 'SHA256' '02ee89e4038beedabe1b7f76921a82274efa2c22e51f46a1bffc8ae1fb93f048'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207701010030-207712312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207701010030-207712312330.nc' 'SHA256' '4f3249b920eb45c37bac0aa377caf8abb497709d452a1660d3e287f32b0f1bc9'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207801010030-207812312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207801010030-207812312330.nc' 'SHA256' 'a905a880c28b2be99cfbef78e61ba84b0586ea0a55cb47672218205e6d7feb39'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207901010030-207912312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_207901010030-207912312330.nc' 'SHA256' '40be333f70b9e3607217236b7ffb248507464b580006adb680981e5ea12e4148'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208001010030-208012312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208001010030-208012312330.nc' 'SHA256' 'afe33b1c5d90873b24d1d3dc4db864b4ca5ce8c73cd940478aeb39bfd1a59f25'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208101010030-208112312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208101010030-208112312330.nc' 'SHA256' '72b0a372f3dde1e322d136ca5d87226fded0b499b8456f3610024915ae38f062'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208201010030-208212312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208201010030-208212312330.nc' 'SHA256' '5051dbc98bed58905b5149ebf96ddc2264a29dd238eee34d025b862cd031feaa'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208301010030-208312312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208301010030-208312312330.nc' 'SHA256' '8e55e044cf98bc82be6c8b4b787481a1c8d1ec14ed025f58688a820a4be788a3'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208401010030-208412312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208401010030-208412312330.nc' 'SHA256' 'ccc2e9ad55acb3aab6ae5f1bb914390538d10c3fe08a5515cb2a2a8902920749'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208501010030-208512312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208501010030-208512312330.nc' 'SHA256' '01d15c6bca61838414cbfffd401e158561d383405151d0da9e053321b1fcb275'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208601010030-208612312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208601010030-208612312330.nc' 'SHA256' '37c29c5875733584784ea04c04e93b343377018c63703a140a06da3667a5b127'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208701010030-208712312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208701010030-208712312330.nc' 'SHA256' 'd916b35360ee9a16380da704f21589ac9638cd43634973daa907abb6397d2533'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208801010030-208812312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208801010030-208812312330.nc' 'SHA256' '6aa381b53f439c5b03add6b8ab771e1addae20f0b6b7008619ba8d4e431d566f'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208901010030-208912312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_208901010030-208912312330.nc' 'SHA256' 'bac76edfb494b7359dce1971df8aac8909a13a66b2cd4211a26359d1160bf3f3'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209001010030-209012312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209001010030-209012312330.nc' 'SHA256' 'a336ceedf7b656b700399c089bc41d2c107c9f78f51bf5da0d609833c3251fff'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209101010030-209112312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209101010030-209112312330.nc' 'SHA256' '785e1603c28b179d54c4b9f2d7f64b516f901e69d22fff58e9b590c799494707'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209201010030-209212312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209201010030-209212312330.nc' 'SHA256' '45d540779a125cf924dad8c6b8de3a2c93d981b18f123f182134711684ef908f'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209301010030-209312312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209301010030-209312312330.nc' 'SHA256' 'c6cae337414f7c5b7fc3379ede251b239c8af22a9cb5cf0f88007434cc1a0614'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209401010030-209412312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209401010030-209412312330.nc' 'SHA256' '6d14123f556e41543bd9df8d10b80dc46c437cd1e499a96a7d5b80ec9229a94a'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209501010030-209512312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209501010030-209512312330.nc' 'SHA256' '46eb09a9088652b874167d34276a663ad7438fe4aa0e1d98a4664fcb4bfb5037'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209601010030-209612312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209601010030-209612312330.nc' 'SHA256' 'c039da80641ac013bb77b564d96005d2c1e11a93ddbcee722d2d8c7cd1a18fb4'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209701010030-209712312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209701010030-209712312330.nc' 'SHA256' '42cf5b6b37dedae50d07cd553dd948a6b879bd3eb7f80fd712bfd4e50ed08568'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209801010030-209812312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209801010030-209812312330.nc' 'SHA256' 'd54a40b3ee716a6d6fae3b8df6ed8b894ed3436b69901956c506872125cb741f'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209901010030-209912312330.nc' 'http://esg1.umr-cnrm.fr/thredds/fileServer/CORDEX_CNRM/output/EUR-11/CNRM/MOHC-HadGEM2-ES/rcp85/r1i1p1/CNRM-ALADIN63/v1/1hr/pr/v20191004/pr_EUR-11_MOHC-HadGEM2-ES_rcp85_r1i1p1_CNRM-ALADIN63_v1_1hr_209901010030-209912312330.nc' 'SHA256' '0c81b3b2bba912ce2959bf48abbb8e6f108c9156e1a1500ae5c8484d4f6d29b7'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 94 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
