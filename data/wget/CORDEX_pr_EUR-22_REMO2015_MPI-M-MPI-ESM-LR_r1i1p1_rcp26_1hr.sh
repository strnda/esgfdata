#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/11/27 04:56:28
# Search URL: http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-22&rcm_name=REMO2015&driving_model=MPI-M-MPI-ESM-LR&ensemble=r1i1p1&experiment=rcp26&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-22&rcm_name=REMO2015&driving_model=MPI-M-MPI-ESM-LR&ensemble=r1i1p1&experiment=rcp26&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_200601010059-200701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_200601010059-200701010000.nc' 'SHA256' '7318d1d6a55b7bdd362da09d19f4691e6a67b1aef37e5390987f19d996b32622'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_200701010059-200801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_200701010059-200801010000.nc' 'SHA256' '918eeb2fd655507878630318ac53b84f7f3c11b04dd2245a31997e8b85c3c6a8'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_200801010059-200901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_200801010059-200901010000.nc' 'SHA256' '95304dbb637fd96e3cb7bb64845cc2adbec7d0eefceee18b066975ea94dfbf69'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_200901010059-201001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_200901010059-201001010000.nc' 'SHA256' 'a43ad56e2afe49340ae56b4af656c8c9812c10e4563957fee36baa0631b32fc8'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201001010100-201101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201001010100-201101010000.nc' 'SHA256' '5d635724bb3c0b1ef4cd115bdd6987be2b07304d4d420dfdf332169fc7fa1990'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201101010100-201201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201101010100-201201010000.nc' 'SHA256' '7b211da2553581ddfa7641d776cf3993d92407ae9f429bc3e2f9ae860ef2a82f'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201201010100-201301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201201010100-201301010000.nc' 'SHA256' 'e5058a4636e518d7510c8cced415158b2378a748fa545bb4ddb9c9345008cfed'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201301010100-201401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201301010100-201401010000.nc' 'SHA256' 'dc78e2e2491740a315535bdd0a914193974f670987c01b290904a83b42bc2155'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201401010100-201501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201401010100-201501010000.nc' 'SHA256' 'b8854c6a561d6cd93abac6b5a253be280f3c05e302544377a49a3abcf5c65c3f'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201501010100-201601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201501010100-201601010000.nc' 'SHA256' '824660d9329ccca81e397f2239a22ad74d42e3423a863929157e0d9cb8705c9a'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201601010100-201701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201601010100-201701010000.nc' 'SHA256' 'aebd5f12c2393fbfadf1c0bf5ee0a054e36b42f13ce1f3bb3e84f11cb76df1e3'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201701010100-201801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201701010100-201801010000.nc' 'SHA256' '38e3b2b8ea61fd63bb48eee5b65cb4919b988f80102b6f12b19774098e0d9fe3'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201801010100-201901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201801010100-201901010000.nc' 'SHA256' 'a0a89f5c58782fc692d80c4034ef0e9bca073edd98199e4f5d6ec0e33197be26'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201901010100-202001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_201901010100-202001010000.nc' 'SHA256' 'ee02aaf300c7ff406f1be6d3c4b2474de61e6129f48e5f5c5cb6e3b55a6d844a'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202001010100-202101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202001010100-202101010000.nc' 'SHA256' 'a7f17628f4248b716dbf52b6ce87191428e1268dcf2631d0a06f329472238b41'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202101010100-202201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202101010100-202201010000.nc' 'SHA256' '8f47c6c918e30218c46b163e684915317fb892712571be1bef880797567c4203'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202201010100-202301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202201010100-202301010000.nc' 'SHA256' 'fcbd8dee48237ecd1cce2033000a5357a81882f369f1dcc3a821fde824b353b1'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202301010100-202401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202301010100-202401010000.nc' 'SHA256' 'aa80c100f4692640d349d420843866764e3f4bcf6e89e727a248194321560b57'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202401010100-202501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202401010100-202501010000.nc' 'SHA256' 'c2b8cf3664fcc8d87b6b65af7070e92c9a9b12faa3955ff03462d9e96d8cb83f'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202501010100-202601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202501010100-202601010000.nc' 'SHA256' '115fdb5aee661458b1de07dfe3aad6a9aedd30ac4e2483fec5aa63f2019cd1df'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202601010100-202701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202601010100-202701010000.nc' 'SHA256' 'd9bec5dd163865f1ce618e5b904f6193297a256701898a06ba4b128ec867aba4'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202701010100-202801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202701010100-202801010000.nc' 'SHA256' '0f1d47b74d732b451e226110d28e55676a1d1ea72049c15e32b10790bed23d8d'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202801010100-202901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202801010100-202901010000.nc' 'SHA256' 'ad733f2d1fd7b253c7451c54cdbb2fe92179b3722664a772e25a668c762e48d4'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202901010100-203001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_202901010100-203001010000.nc' 'SHA256' '14e7669e611b23747e5460a85d407fbf6c7c45fc6a57939524de3d5d0d925496'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203001010100-203101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203001010100-203101010000.nc' 'SHA256' '351ffea4c49677815693fac20ee3ed4f5925d4f0c7e21249eea302261e1cd4b3'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203101010100-203201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203101010100-203201010000.nc' 'SHA256' '32e8adf251a4d182e359fd88a63e73d8a0faa41d7719f45a824d56590ad9a8cb'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203201010100-203301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203201010100-203301010000.nc' 'SHA256' 'e322739436b11994c418bea6f927aea472ef272794feb3bb475b03f8f465b44c'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203301010100-203401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203301010100-203401010000.nc' 'SHA256' '8ab1cc692db20cd650b5d5a8361c845c4938d6e91625186525cae5e5667dd26e'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203401010100-203501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203401010100-203501010000.nc' 'SHA256' '9a6cb5e911f35a57c818e06d745db29dc22da4fdf3cae91523f464f5c6518881'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203501010100-203601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203501010100-203601010000.nc' 'SHA256' 'fb0d7aa89528bc43c3d1c41dde08fed7ae04e267db97dd9bfeb9f9a7cfd34607'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203601010100-203701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203601010100-203701010000.nc' 'SHA256' '7fbdb58c2cdc91a35b5fd36462df8e969c40fdd89c771ce637a665e31cd13130'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203701010100-203801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203701010100-203801010000.nc' 'SHA256' 'bf1ffbe4042d4b11e3f1ede67db64039d9f6ba78942b8df3e614777dd7f1d46e'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203801010100-203901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203801010100-203901010000.nc' 'SHA256' '9fe82d123c34ba43da3b25fb0d1a145fd89956345af02b53ca81045ed654ab64'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203901010100-204001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_203901010100-204001010000.nc' 'SHA256' '0c344b9d88d4d69e25ebfa845417fa1a917e479122e4448a3f168470a6a52485'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204001010100-204101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204001010100-204101010000.nc' 'SHA256' '80dfa55dedc2f7cd7f45f4874c02db67305073d3ed3f441b32c528338df9ae26'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204101010100-204201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204101010100-204201010000.nc' 'SHA256' '919665a1b90174d9b65a9d4375717970c03f98cebe8230f0b349f054b5654517'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204201010100-204301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204201010100-204301010000.nc' 'SHA256' 'bf4cdf36827567fc7cb64a8a20fdae803b48766e9efbdd3e300bc905cd98f661'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204301010100-204401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204301010100-204401010000.nc' 'SHA256' 'a5d6528f5115d14b0e113efe4e0ae9f10fe29fa1b7b26fef73be75e7b7c1ff9d'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204401010100-204501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204401010100-204501010000.nc' 'SHA256' '286d198962253b828a05125543acf2a63426956334aeb12ab8e711338937feec'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204501010100-204601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204501010100-204601010000.nc' 'SHA256' '42c86592aafefdf98a690aafb3778bba8d5c7da852faeeedc8ebb43d4efcfd79'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204601010100-204701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204601010100-204701010000.nc' 'SHA256' '4abeddabee278e48016d5b9f21285ec44879dc4d0ffce4b2583c5bb02c058898'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204701010100-204801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204701010100-204801010000.nc' 'SHA256' '07bcc9192e6209d9d45f8579ae446bfa5cf3b261204aca384eb96c80a1e33819'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204801010100-204901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204801010100-204901010000.nc' 'SHA256' '7ad7885925764850fe143448465626b4dc3d9ebef102c39c64b2d3236fa5ce1c'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204901010100-205001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_204901010100-205001010000.nc' 'SHA256' 'f4d175d7b41713845eaa19d4585aedbef880051759699ab92c2625b60a46f5fa'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205001010100-205101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205001010100-205101010000.nc' 'SHA256' '0e2d3af72519de62f4e4ddc46c1111366a03eb533e787de607c4a09342386d19'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205101010100-205201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205101010100-205201010000.nc' 'SHA256' '8a809acba17202ee8217e2b1528c03b6775ace224b90fc03cc2873a3b4ed07c5'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205201010100-205301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205201010100-205301010000.nc' 'SHA256' '717afbf2fd7fce5bae5446061e3bba0b7b50b8e6d9351149ea16f9d385fd571e'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205301010100-205401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205301010100-205401010000.nc' 'SHA256' '49ecea64df15960e5374d242a8f7566e29ef8a94cd9110df42f57516e312f2bd'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205401010100-205501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205401010100-205501010000.nc' 'SHA256' '0126416dd1560b8b9a81a38640ba432a8f1492f6bf93b28bae01068c0a930018'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205501010100-205601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205501010100-205601010000.nc' 'SHA256' '476ba13103616c623cdf844c2d4d2fccd993bc94760145d60b5c0ac9a9c850b1'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205601010100-205701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205601010100-205701010000.nc' 'SHA256' '8019c258374961d6f8b820797584a0bde7272e3981b6d56e8310ec4bd49db82d'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205701010100-205801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205701010100-205801010000.nc' 'SHA256' '03f33619924d8cfff7bb53dc33138878b3f2d5d82331981e3fdfe7d7708592ba'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205801010100-205901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205801010100-205901010000.nc' 'SHA256' '1694ef8ff571bb3147b1832bc4d27ed2a821930e3ffd3e9f68fe876a629afe7f'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205901010100-206001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_205901010100-206001010000.nc' 'SHA256' '0220228810a62ae492559ba8f5f8204e3c8ebb84e61799bc1f5a35714a310112'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206001010100-206101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206001010100-206101010000.nc' 'SHA256' '6a85471fbec728cbc0516ccbc145ddc41664640cb239e34044da108d8e42716e'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206101010100-206201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206101010100-206201010000.nc' 'SHA256' '6a8354a466d76074e626fbf1aeeedb9afe66b5afd551698f9bc329d4fc60427d'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206201010100-206301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206201010100-206301010000.nc' 'SHA256' '3fa21f3de7f47653c1187ef78038775e4b5877dd9a975d8331ee1bffb3d03b47'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206301010100-206401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206301010100-206401010000.nc' 'SHA256' 'c577c933303a5cc2c4c341f00d9221971ab6cf7bd2633dee0d6259c751159abd'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206401010100-206501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206401010100-206501010000.nc' 'SHA256' '96996a2c5170f43189753ab2f9098cc28bf2e29b65a1dc8184ea09307a9935a4'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206501010100-206601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206501010100-206601010000.nc' 'SHA256' '4afbbaa6bd49cf29817daedd4be3cd619c7d128aa6dfe25b13d6aa66118d498e'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206601010100-206701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206601010100-206701010000.nc' 'SHA256' '20f9d6d5cb3d25e0e8e0fe3c69db5fe16023e79d5cfb89bac7fab973aad513eb'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206701010100-206801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206701010100-206801010000.nc' 'SHA256' 'e4575b0e99e6af28df698b284fa1f8ec9d6c70e225551c6bfb1658c2f0c11ae9'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206801010100-206901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206801010100-206901010000.nc' 'SHA256' '4caf7b497b4f0a08d52355846dc951168355ac0674512dab74b3dd3b7b3b0516'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206901010100-207001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_206901010100-207001010000.nc' 'SHA256' 'f9235c72736435aeb3e924247b52ecead6485ed4c97b7986f1ba188ed752c23f'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207001010100-207101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207001010100-207101010000.nc' 'SHA256' 'fe1d5b7ae8a0638f0a836bd9471f645ddf52a2fbf5357c7a1cd8856e69a0d24a'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207101010100-207201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207101010100-207201010000.nc' 'SHA256' '8a2b32a50a07659d60e285d636e61f5454696900fb1940ab0db8342397d6ecc1'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207201010100-207301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207201010100-207301010000.nc' 'SHA256' 'b2c2e7ff975c8bb9892707cf4a37730750b8e1e471804e5e3c0155d629b9d118'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207301010100-207401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207301010100-207401010000.nc' 'SHA256' '5750a9b8a9ec67a19ea20058c30211bab5ae87fd4f69c586267c6400c2549535'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207401010100-207501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207401010100-207501010000.nc' 'SHA256' '29a1edbac4ce19e608af2bde6d108aac495bcc6030c95a06d97cfa6ce5b6cd24'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207501010100-207601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207501010100-207601010000.nc' 'SHA256' 'e298ec838fe5d7e2a54f3978520dfec145f52885b0820389ada32e7e1743c9ac'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207601010100-207701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207601010100-207701010000.nc' 'SHA256' '3aeef34fb4e670ba69f769809672339cc93cb22e706918ff1904ef921414bcdb'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207701010100-207801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207701010100-207801010000.nc' 'SHA256' 'c3c809d58c2b682fbf1752aca17aaad04b76bbb8f89a7990a289d4d44dd58242'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207801010100-207901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207801010100-207901010000.nc' 'SHA256' 'c0c9f408aeaf993f545e6f46916d392572c9b419a62ee8210e9a209a71f88e75'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207901010100-208001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_207901010100-208001010000.nc' 'SHA256' '7165926bd2b6b20323ee1862b5e431104017fbaf11f4c5c5ddbe1a89ced327ad'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208001010100-208101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208001010100-208101010000.nc' 'SHA256' '3b9610edf581edc71bb5aadd31fbac513f37a6724a39df4de15c8013da29351b'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208101010100-208201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208101010100-208201010000.nc' 'SHA256' '0f1aca495df75cd90d34a1d1b8d7776b1e766fc6c30f4ad5ec8317ecd1d492d4'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208201010100-208301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208201010100-208301010000.nc' 'SHA256' 'afa43673c91ad74167f99801eb22857164f9690996e60696e06deae6b0562ae1'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208301010100-208401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208301010100-208401010000.nc' 'SHA256' 'e5034e724a75f04b7de9864e098be291185dfeef7bc75a8c995a04900504323c'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208401010100-208501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208401010100-208501010000.nc' 'SHA256' '90cc13853bbd959d01fb9bab84a9b7ee02a5ca2c3c9d9a0ee7e825290345e1a6'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208501010100-208601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208501010100-208601010000.nc' 'SHA256' 'de7587ed99958342b3476602a4c8141750097aa9b1e3e1d3bbe63b0fa9e59e5d'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208601010100-208701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208601010100-208701010000.nc' 'SHA256' '4647ca6a685ff2fc2788dfee1f9aee9d54eb3fae838008816f1111cc1033f579'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208701010100-208801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208701010100-208801010000.nc' 'SHA256' '86c659ae9ac768ddee38c1bb05e0e66bbd73f77a940fe2e19a7673e1b75594b7'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208801010100-208901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208801010100-208901010000.nc' 'SHA256' 'fe155536c519a582b567990e9f85e02c7a945014a53b697260a05a4bb5eb2005'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208901010100-209001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_208901010100-209001010000.nc' 'SHA256' 'ab1c39e6352e1fd76ea1804e42505a4e9b0e54bf974382a2be49543a378f218e'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209001010100-209101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209001010100-209101010000.nc' 'SHA256' 'f58036553daf324cedac2724411013e3df86c2104e192c63b68a61ee16bed162'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209101010100-209201010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209101010100-209201010000.nc' 'SHA256' '6e343a62dbc9f7dc70d2ab8160fc3a9a2bdaa77c290d686c622260b2712d78c8'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209201010100-209301010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209201010100-209301010000.nc' 'SHA256' '8559d7180aaeae08005d4a3b66cab2d4046555005d31fb06797d34a0e36c2bc0'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209301010100-209401010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209301010100-209401010000.nc' 'SHA256' '1e1c72af3c6690a391edf8909de32839362aca82ec723066cbfaea51c83d257c'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209401010100-209501010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209401010100-209501010000.nc' 'SHA256' '8ce432c5f9e35ff9f9513332eb6d5a7a626b80cf1db300a797bdef78fabb5acc'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209501010100-209601010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209501010100-209601010000.nc' 'SHA256' '2b5b877d90ed5e054a30ffa071a77d0a6f55ca9b375827c087087ce7627211df'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209601010100-209701010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209601010100-209701010000.nc' 'SHA256' 'a68a99f29d791b15cd7bfe2a35936d4dbda32e32f4930c1ea50e3d49b0ce7769'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209701010100-209801010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209701010100-209801010000.nc' 'SHA256' '165adc831000f07129b373655abb25c2df0ccf6bf2ba2c00288dcc55bcf610b8'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209801010100-209901010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209801010100-209901010000.nc' 'SHA256' '7c93068b3e8abc008781e8beb461c5660d44226145949eb543bbba195268f689'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209901010100-210001010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_209901010100-210001010000.nc' 'SHA256' '0bcbe702dce9dd6473ded0043d8062ad207ca2d0b7d21c34cf055b7b797853f8'
'pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_210001010100-210101010000.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/EUR-22/GERICS/MPI-M-MPI-ESM-LR/rcp26/r1i1p1/GERICS-REMO2015/v1/1hr/pr/v20191025/pr_EUR-22_MPI-M-MPI-ESM-LR_rcp26_r1i1p1_GERICS-REMO2015_v1_1hr_210001010100-210101010000.nc' 'SHA256' '790ee63809157b7b26b42f1e759a1899d112448fa64e7e20860976832dfe3f93'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 95 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
