#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/11/27 05:34:11
# Search URL: http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-11&rcm_name=RCA4&driving_model=MPI-M-MPI-ESM-LR&ensemble=r3i1p1&experiment=rcp85&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-11&rcm_name=RCA4&driving_model=MPI-M-MPI-ESM-LR&ensemble=r3i1p1&experiment=rcp85&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_200601010030-200612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_200601010030-200612312330.nc' 'SHA256' '4bbc1cf701442613f2af04ad8afe807205632c129b0d2fd7498a68a31184a2bc'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_200701010030-200712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_200701010030-200712312330.nc' 'SHA256' '4582def57d6285f14563c67ac4288be7339a6e4f22b9cbdb578542efdb012178'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_200801010030-200812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_200801010030-200812312330.nc' 'SHA256' '7bb3bf4466f8dafeda2fdedd9616d6c064d1b66937a2061bb178caa7c60d5d58'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_200901010030-200912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_200901010030-200912312330.nc' 'SHA256' '9dd0494aa9c874fa42170c150a04631a29b0f15e3f3f52bc0288439a924f22f8'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201001010030-201012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201001010030-201012312330.nc' 'SHA256' '1e29a54d42b3d14949a98a5222c08ee1bc98aa14d3447fa60a068c1b9007fd5c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201101010030-201112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201101010030-201112312330.nc' 'SHA256' '1deeb4e3996648fe22f6477f02d3c87afd12b689272c280f2a6b869368035f12'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201201010030-201212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201201010030-201212312330.nc' 'SHA256' '2c4fb55f55f4fd91ba89134bcf33355587cab5056f2a56b74ef7c37f9e8504a2'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201301010030-201312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201301010030-201312312330.nc' 'SHA256' 'cc00923525300e9ad6eeb13fc243f3f2ff01befb8843c7d274798b2f94ebd56f'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201401010030-201412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201401010030-201412312330.nc' 'SHA256' '57df2b114ff07d87c738fcefa42c103b9d53cfb414494fe7277bca959fa9b5e5'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201501010030-201512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201501010030-201512312330.nc' 'SHA256' 'af675905cc8b47ba9f9a0288544b9aeed6032cdb4d06865bc27bd66e89bf8256'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201601010030-201612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201601010030-201612312330.nc' 'SHA256' '0151bb058d202b1ee720042fc0fbcd6e492d18069a9643e23b3dcec711c59c50'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201701010030-201712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201701010030-201712312330.nc' 'SHA256' '996ee6abb836898beda16beceb21b00b63e421e0d55d37e8f7a39dab38aab9d9'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201801010030-201812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201801010030-201812312330.nc' 'SHA256' '53932e4f49b747ecc109be2f1aa7c199de19fccecc6cba94f9f7aed727e68e46'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201901010030-201912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_201901010030-201912312330.nc' 'SHA256' '41248605f330ecf0054ec215c9040d0aefa7b9158079dbff207eded82f201ee9'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202001010030-202012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202001010030-202012312330.nc' 'SHA256' 'cb4593489b8fe3df9f1ecb9f47634805b0bf768ee51797c74976e4de0926d87e'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202101010030-202112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202101010030-202112312330.nc' 'SHA256' 'd1e11d42b4f7c741636a8dadefd4f02cca6c0f5d709ade480d5cb11af41ffc17'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202201010030-202212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202201010030-202212312330.nc' 'SHA256' 'f16d01d882a550edaef2d5e5502646f7d83ca5e47531da8d22ee70c557f1316c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202301010030-202312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202301010030-202312312330.nc' 'SHA256' '3218d3adf42947a5c653038099127bf67554cd52c4ddf9b3585742a8f983989e'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202401010030-202412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202401010030-202412312330.nc' 'SHA256' '068e8550e9d648006ff4a429353bee64fb27121e87838c704211e3fd55328a82'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202501010030-202512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202501010030-202512312330.nc' 'SHA256' '9c68f11f70e49182d7416501a641651fdff877dfdd1106d2bf14a7b118cf21ba'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202601010030-202612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202601010030-202612312330.nc' 'SHA256' '9b3f0ef2887de68291b0a9dd2edacd0edd2b3fd127d2dd488737a225004245d2'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202701010030-202712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202701010030-202712312330.nc' 'SHA256' '11f85991fd53a1f03f3ee378521acfdf8b9fcfe737e94fe79f1e53a39e6e5a85'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202801010030-202812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202801010030-202812312330.nc' 'SHA256' '1080213b97808a0a23772e37008b83f5a314f66f00ad5786873beac055d379dc'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202901010030-202912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_202901010030-202912312330.nc' 'SHA256' '3a680dadf90827cfcbd637cb210fc29bb9b5291b1e7639d3776aebc6e568f1fe'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203001010030-203012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203001010030-203012312330.nc' 'SHA256' '2b9d12268cf08b883c0624a5aab17849fc7d5b63e82271081eb4455660eadc7f'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203101010030-203112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203101010030-203112312330.nc' 'SHA256' 'fb88437b8922611738c4ad6632c4755ab4af8c5b23858e60a08e6ed87ee8274b'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203201010030-203212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203201010030-203212312330.nc' 'SHA256' '203c0b2f370f6e53f257ac878815d8ebcb53b534175e1439622499314d5db586'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203301010030-203312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203301010030-203312312330.nc' 'SHA256' '622ebf607aa95fba9e1eedf8414adbef0e165092be08d2553dd0dc76b2c62b02'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203401010030-203412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203401010030-203412312330.nc' 'SHA256' '1de1cd63295dbe372df662d3e37634002a96a9f5bc0c38bc766c532df577e2d0'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203501010030-203512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203501010030-203512312330.nc' 'SHA256' 'c542c9af294ba1506a856b94e261c9cb04c6743733237903553696eebddecb9d'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203601010030-203612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203601010030-203612312330.nc' 'SHA256' '1dae6e4ba7eb6fd87600caa5aadcc87510e3f5206c312d94d2b2004237ea6e3c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203701010030-203712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203701010030-203712312330.nc' 'SHA256' 'f92774534f74a554317869040c170f4bd95260017491d8e5b5dbd23fe178e389'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203801010030-203812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203801010030-203812312330.nc' 'SHA256' '3d959013d81bcfb070a742351f40103ed94e1bb6869e5f08cd50773cc3e81393'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203901010030-203912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_203901010030-203912312330.nc' 'SHA256' 'f04eb4f3516a8dedb0c5dc48eff7dd87ef343f8d96b0ba8cc30b76e10e578b33'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204001010030-204012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204001010030-204012312330.nc' 'SHA256' 'b49f031f958da26389678c18f9bc68a131ed00550c490fb248670865f6da8518'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204101010030-204112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204101010030-204112312330.nc' 'SHA256' '4f6ce9da0af0933c3ca445f4245c6ad3d99542c3092c7c411051455ce5579ff5'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204201010030-204212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204201010030-204212312330.nc' 'SHA256' 'ba308be7a0a6390a0add6b80346d16cb23ff6b97cb054b37c0f0d45631c3d169'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204301010030-204312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204301010030-204312312330.nc' 'SHA256' '2b3b9f04ac65596e5b70252c3adc8f940e2be468d09a470fee4d8de74ff6f2de'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204401010030-204412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204401010030-204412312330.nc' 'SHA256' 'dc7905b1c713a29e1e4df04948fbc969f3875ca329b4e47fc2498eda3c5ae396'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204501010030-204512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204501010030-204512312330.nc' 'SHA256' '89bfeb48587010169ae3a266c9b4c8950ac97ad963162822a0ca67803e191e3b'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204601010030-204612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204601010030-204612312330.nc' 'SHA256' 'dc3f9d344a7ded2f6593e9246cea51e034417baf039c80d6e0353efab28d6d24'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204701010030-204712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204701010030-204712312330.nc' 'SHA256' '4f9bea7ea5ba3bea101cb2c22ff5ccc46110fea76319fefc9fad7d9afdad8bc7'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204801010030-204812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204801010030-204812312330.nc' 'SHA256' '3e0abd020c4e9a1a0e0d5c06e6cf533555afb2a87135aa11b1316b785156ef86'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204901010030-204912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_204901010030-204912312330.nc' 'SHA256' '9fa6b6150a99da89d0ea8aa697bdbbdc6a8671d5d7bc67903387243546677baf'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205001010030-205012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205001010030-205012312330.nc' 'SHA256' '1f9d4cc71309fcf9d716a97de8e3bf30d2042399b22403e83524ee8da377eeba'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205101010030-205112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205101010030-205112312330.nc' 'SHA256' '05089b7b18e9230f28993adfecd8146e2e45a7d05b049d146dc92c54adae293d'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205201010030-205212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205201010030-205212312330.nc' 'SHA256' 'a57bab62887b5ad66ae5ef1a96f1373bee59fb238fbbc98f002a75f4c6c4effc'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205301010030-205312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205301010030-205312312330.nc' 'SHA256' '0d2fde96f69e5f63fb9e14daceddb2e3c16fc09a555e55400cf2e4d8d8ef7f2e'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205401010030-205412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205401010030-205412312330.nc' 'SHA256' '7e2aae1f4315c6b6be676b5334ef147751ff541fcf69e1d8c5509cae4126efda'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205501010030-205512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205501010030-205512312330.nc' 'SHA256' '20012ea201d3def1511022c695a9b427ff0b42eb3c44ac27a3a7e433b2d2e320'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205601010030-205612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205601010030-205612312330.nc' 'SHA256' '9119e9b2c7d68e301806980ae499bbfec5560a34a9c11a45f1a9e4acc731c364'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205701010030-205712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205701010030-205712312330.nc' 'SHA256' '38058f729877efd6812953a68d02b852b3b25b646425e5761f402e84cea8b6a1'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205801010030-205812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205801010030-205812312330.nc' 'SHA256' '956f42b90f0872b7611fe292dba4c850fb1d8ada4901e50d90ced115d480bebc'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205901010030-205912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_205901010030-205912312330.nc' 'SHA256' '008cb83c092544738c6ef01856e30837d5bf309f302e4fe3cdb603976953a264'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206001010030-206012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206001010030-206012312330.nc' 'SHA256' 'aa9182a833b4b23cc997013a8d0faaffb41978f9d52d16c0d54ba91a69d9171d'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206101010030-206112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206101010030-206112312330.nc' 'SHA256' 'b92a27edb044776fd73063712bcc84e560c52473a02a50fe72a8100e90d81547'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206201010030-206212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206201010030-206212312330.nc' 'SHA256' 'f656425024e8b72cca8ed544d85bd102580ada4803f2c97ea91472882cd392a1'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206301010030-206312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206301010030-206312312330.nc' 'SHA256' 'b8c9dc176808719561ab9c160a0d18099c1531ee211d9c77a52f62e1e2d7ca6d'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206401010030-206412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206401010030-206412312330.nc' 'SHA256' '1565a4bebfc3e1a07371bdc3c33b3b5c18ebe569bdb3d383c212c2cebd1eb1d9'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206501010030-206512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206501010030-206512312330.nc' 'SHA256' '647a4160cb8b928b7c1786e4acffd333869304dc7c1b9b163aceaaa89b020e1c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206601010030-206612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206601010030-206612312330.nc' 'SHA256' 'a53d86583dd866daf31a1b04bf6fca928e966fa7d5babfc5de294631f8e26b12'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206701010030-206712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206701010030-206712312330.nc' 'SHA256' '1e37e4ebaf811839d7d694914be541922139dece3b04db9d247c0febe9e13b92'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206801010030-206812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206801010030-206812312330.nc' 'SHA256' '34c4b892d9b7438231020adc566d8bf46ab3b8971c7e92c4a697992ec4006991'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206901010030-206912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_206901010030-206912312330.nc' 'SHA256' '212fb8999782a6d1a84ba1cb7475e1084527dc586f16f6a7a816b603676bdb49'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207001010030-207012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207001010030-207012312330.nc' 'SHA256' '0fa814ac9f034caf63b91ccfc71c8ba0358cd84b80ab62612194f217ad53cb45'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207101010030-207112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207101010030-207112312330.nc' 'SHA256' '66d377f4dccbe858a62420ef1e403e0c50c1950e25c9c15333add3547b3bb32a'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207201010030-207212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207201010030-207212312330.nc' 'SHA256' '35b1445f4824801ac78023094db6495d4deae02aa89f8cd907cdea87da1a12dc'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207301010030-207312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207301010030-207312312330.nc' 'SHA256' 'e1e3a614f537dd4fc15e3a904b5f4edc3a2a4bd3c632ac1e3247d511694ac903'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207401010030-207412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207401010030-207412312330.nc' 'SHA256' '937b7bff719bbf9f9ade1e3ccc334ac2494323526dea65342e815107227fd05e'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207501010030-207512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207501010030-207512312330.nc' 'SHA256' '1b004d55a873e9a7ee9acd0e8c76938c697e65a8136ba4b30a521d41de31beb9'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207601010030-207612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207601010030-207612312330.nc' 'SHA256' 'd79c1a2aaa5186fe6c430ac40594ca785edb7f2fad93301dc7ac1187473b824d'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207701010030-207712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207701010030-207712312330.nc' 'SHA256' '4815c1816fe2549b6bba371c57e133c0d222d5495db021489862dd9b7453b1d1'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207801010030-207812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207801010030-207812312330.nc' 'SHA256' '5ec783c96d2d285c05a2c1d3d40590c3034cbe08c9f7ef3ac6c0afebe2ee3c07'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207901010030-207912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_207901010030-207912312330.nc' 'SHA256' 'fd9b2ffa74642c5d6888efefa9d8790e71297109402bf3d04fe3639bf9367892'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208001010030-208012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208001010030-208012312330.nc' 'SHA256' 'af26c8992ed63f07b03f305af4d3e9605ab5c1f254174379c1d4fc1978ac1392'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208101010030-208112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208101010030-208112312330.nc' 'SHA256' '5d11c9dd28d5e9ef92b6c15dbecbc30f1122180391ecdc282a508b32aa31ef93'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208201010030-208212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208201010030-208212312330.nc' 'SHA256' '010735c209f253202d718e5878b8ecaf151a6845266da4aceb3a383db40f3b9e'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208301010030-208312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208301010030-208312312330.nc' 'SHA256' '06ec9a1f16d6f375deae3a0a89de2d427ee47728b340e18c6e599b9c866b737d'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208401010030-208412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208401010030-208412312330.nc' 'SHA256' '6881c7c190e85e554f95c19e1b508166cb5146fd13cfc90b0f1aa951a2aca20a'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208501010030-208512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208501010030-208512312330.nc' 'SHA256' '61b0dbddd471a25d81212109543c72dbf465d14609feeefbd363b80ce34fd7cd'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208601010030-208612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208601010030-208612312330.nc' 'SHA256' '226961c413eb931ce73fb5ae51714c415e1803a4f05f20696b6eadbe9b767772'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208701010030-208712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208701010030-208712312330.nc' 'SHA256' 'b6a724651d0215484c54cb980ae1a0185c18d9ee1885950afa06c42ffb82be2c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208801010030-208812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208801010030-208812312330.nc' 'SHA256' 'ae2fac9ac5fb25424daa1a7ea260fe6d900e0f972fe0f5b68a6a79cf5344570e'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208901010030-208912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_208901010030-208912312330.nc' 'SHA256' '08d2fcdedfdd7cd061b937cbb39ddd57be05f0ea81f0c4b58c0a72a7d48164b3'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209001010030-209012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209001010030-209012312330.nc' 'SHA256' 'c3047e4957f7c3328a5826c8e46b6132c5802ab43742f36e6fb185a0b29afa12'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209101010030-209112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209101010030-209112312330.nc' 'SHA256' 'ab916b6406bc79f405820e711949af22619da7d9f35aeb82e779a61259140895'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209201010030-209212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209201010030-209212312330.nc' 'SHA256' '673a5d3b13edcacd08836e281e301e5292972fa3317b3154c9b8414f9f70c82c'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209301010030-209312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209301010030-209312312330.nc' 'SHA256' '09bc4152d792754eaf0822eff8e9d105b1733e06694dd46047ab438894cb50b2'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209401010030-209412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209401010030-209412312330.nc' 'SHA256' '004be17014062db739513cc0c45ceaf6b0f0890ff999f17dbce1f4e18a93616b'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209501010030-209512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209501010030-209512312330.nc' 'SHA256' '5065bfe2ee35d6d748ba8822acc10f1551e31decccd14fb497dcc60f852143fe'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209601010030-209612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209601010030-209612312330.nc' 'SHA256' '135306981ff0cdc06bf348bd21405d9ca7fd38ac32e854b4f97c854ef73c4cb0'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209701010030-209712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209701010030-209712312330.nc' 'SHA256' '99598eeb1507ad31542a5f805cc634029a188b79ead2655d1b6d91ed4c5fe747'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209801010030-209812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209801010030-209812312330.nc' 'SHA256' 'ed3921ec23019e70e79d13f3d6b327e6126bfc5602d2d54e69713af654b73807'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209901010030-209912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_209901010030-209912312330.nc' 'SHA256' '63a653338d5eda1f0ecfc9f782f0d8ded97f9bd9f2bc6d82a003873748c2993d'
'pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_210001010030-210012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MPI-M-MPI-ESM-LR/rcp85/r3i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MPI-M-MPI-ESM-LR_rcp85_r3i1p1_SMHI-RCA4_v1_1hr_210001010030-210012312330.nc' 'SHA256' '1b282d0a97d6341cd2dadd7ba84640c9fcf7f68cf7ce65963930b32a7b724cad'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 95 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
