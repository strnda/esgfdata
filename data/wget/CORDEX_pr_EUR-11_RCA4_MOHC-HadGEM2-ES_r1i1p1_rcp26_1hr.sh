#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/11/27 04:55:15
# Search URL: http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-11&rcm_name=RCA4&driving_model=MOHC-HadGEM2-ES&ensemble=r1i1p1&experiment=rcp26&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-11&rcm_name=RCA4&driving_model=MOHC-HadGEM2-ES&ensemble=r1i1p1&experiment=rcp26&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_200601010030-200612302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_200601010030-200612302330.nc' 'SHA256' '4b51aa84c667055d7e6e07a2422b5e201f58ba498492f73a677ddaf7d915866d'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_200701010030-200712302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_200701010030-200712302330.nc' 'SHA256' '4f92c2430cacece23cc5a51e770e8d26a2480ff19e98f8dda7c9f4a611c9cab6'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_200801010030-200812302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_200801010030-200812302330.nc' 'SHA256' '758bebe26d2f2833574b3732a45f60d848090afcc12cf5202c885fc3407fbb51'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_200901010030-200912302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_200901010030-200912302330.nc' 'SHA256' '0ed04305c2658bf17066576a89bb680086f4f3962244f966639210cdbaf72783'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201001010030-201012302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201001010030-201012302330.nc' 'SHA256' 'b39c15d297aae5678b80aec9390f6d4a1b52ab58ae20b2e5ea72ceff1595966f'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201101010030-201112302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201101010030-201112302330.nc' 'SHA256' 'd46ae0a080ddb6e397b83caf960ba7569f9ba62dbbcf986720cc9e3962d49807'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201201010030-201212302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201201010030-201212302330.nc' 'SHA256' '4249ccf4cad4d8b6af732a1449582ec5d0d09d87347e848fb76662324f0b5346'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201301010030-201312302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201301010030-201312302330.nc' 'SHA256' 'ace0d5c37941819380a99aee3333255bef5339a16eb722d1934598720b6c0ab6'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201401010030-201412302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201401010030-201412302330.nc' 'SHA256' '6920075d17c12e7a26c5d917b24ce63d149d8c776a55cdffcfec6da6cb0afd45'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201501010030-201512302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201501010030-201512302330.nc' 'SHA256' '1f02ec196c0a60f0fb3f90e2ba565e57e2efc1ea936212940edc904a9eadf448'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201601010030-201612302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201601010030-201612302330.nc' 'SHA256' '92599f69e027be45765c1cac276584914c814c261fa19f558c52abe3761bed17'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201701010030-201712302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201701010030-201712302330.nc' 'SHA256' 'bdd16675b9a9e82e372372f7b9ffeb72d412333d9a491ade4e25fc5da786e2bb'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201801010030-201812302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201801010030-201812302330.nc' 'SHA256' '282ae283419fe17e4d06d21f391b5a307c9d9c6e82ef01ed4795c78da1171779'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201901010030-201912302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_201901010030-201912302330.nc' 'SHA256' '53e9c4eea98ca053a06aaf634f4c1b0896dd134203372f0fdc638edf88739854'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202001010030-202012302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202001010030-202012302330.nc' 'SHA256' 'b6a735012bbe2bd1f15a26639819346def6dbbaa8b66885af0f59ba05d6d3201'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202101010030-202112302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202101010030-202112302330.nc' 'SHA256' '43a8db46c82a90777c6f949ba3cd9efe617e8fc316761344cf01d982eba4f826'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202201010030-202212302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202201010030-202212302330.nc' 'SHA256' '1c130e5c5b75ba3ac1d2cc4d84fd23dd7082ceaad7ae04de67597c7ca14c3f22'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202301010030-202312302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202301010030-202312302330.nc' 'SHA256' 'fc6ff4b86e7b2eaf844ddfbe29e7d4bfe57ee2b5bb8352e3d5c139733d363fca'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202401010030-202412302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202401010030-202412302330.nc' 'SHA256' 'd4a41ff8983cf516e232d97539e0fea6caf61e9a76138a442b4b5c3476cd620f'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202501010030-202512302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202501010030-202512302330.nc' 'SHA256' 'dee9439cb95d29cbcf6e64eb666c93d55f152ecf56567d250f404e2f8aabce74'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202601010030-202612302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202601010030-202612302330.nc' 'SHA256' 'a03fb57e14579532e89e98b54699709bf74ec925875a78956d5f7b0a8da73dfa'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202701010030-202712302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202701010030-202712302330.nc' 'SHA256' '045f186ab3a6f2844a54f757afb24081665b29d1ed3e5fd5a989e468d020c27b'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202801010030-202812302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202801010030-202812302330.nc' 'SHA256' 'de04b2f92523caeaec0ec61c9bebb661edf59fcbc9e221e2ef9fa947587b8b7d'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202901010030-202912302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_202901010030-202912302330.nc' 'SHA256' '7e3b0c17af7cc9fecc3818323f2a0688af480ee637d50762bc93999f30d504ab'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203001010030-203012302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203001010030-203012302330.nc' 'SHA256' '1890305a7bb3e53953edad34a3ca296de5fa6bb443c058579baafb84607810ab'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203101010030-203112302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203101010030-203112302330.nc' 'SHA256' 'af8b8b15852b08e9969192019250fe01ec51813ac4954d815a2eb3d09f368045'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203201010030-203212302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203201010030-203212302330.nc' 'SHA256' '9441e63f467f35865085e7db2ca9bb1f2d2195597ac0b266510dc849bf8c79cd'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203301010030-203312302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203301010030-203312302330.nc' 'SHA256' '88228b40a4010fabf487e9d163c6bbabe57ddff0dff3b9c5ba6d0d0b8288b200'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203401010030-203412302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203401010030-203412302330.nc' 'SHA256' '74854af8d17c7da0a99388d25ba2ae9ccefd00d0cbd5a40cbd92d955005485fa'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203501010030-203512302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203501010030-203512302330.nc' 'SHA256' '09c56481f7e5990363ce6161db03df780d6b550a892cb591bdc00700041dd762'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203601010030-203612302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203601010030-203612302330.nc' 'SHA256' '3cf8bbc3b9b945da1e3e5bc350e69ac82b1dfe7942431e8b9e71b6bf2ea8e455'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203701010030-203712302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203701010030-203712302330.nc' 'SHA256' 'b246c60b92438448f4798baba30c96508231538475dd91fe295ac7c417deae1c'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203801010030-203812302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203801010030-203812302330.nc' 'SHA256' '2e7db904005d76c31268be0d34870c5416dce5d6281aabddfdccae87d71d8dcf'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203901010030-203912302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_203901010030-203912302330.nc' 'SHA256' 'd442c6738b1ee1425d8e538d05b47e7bb061fe589e9c2ad12f5f840b619a12d6'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204001010030-204012302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204001010030-204012302330.nc' 'SHA256' '2877eef39040e97bf030718febddb37b35b7bf83e3d242d206a979e27b3de225'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204101010030-204112302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204101010030-204112302330.nc' 'SHA256' 'fa5804fce0a927465fa5b16fc84abe769fe1037ac64ffa633403d230273652cd'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204201010030-204212302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204201010030-204212302330.nc' 'SHA256' '9bd3ff9bcdfd6709b7451ea11bb01bad99afc74e72b63c3a49d459629ae27fa1'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204301010030-204312302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204301010030-204312302330.nc' 'SHA256' 'ee360a2784285dd60b59115b90c1d074d0fc5bcc2961d50204e50174620106a4'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204401010030-204412302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204401010030-204412302330.nc' 'SHA256' '7e70ea463ce3263fb4c3d97f622c156626e02db79bc5b69d816962484db8d4dd'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204501010030-204512302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204501010030-204512302330.nc' 'SHA256' '88040f4b2ecb89b327aec165411b7d9ca3de3551f09252627602c2b6d314ee17'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204601010030-204612302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204601010030-204612302330.nc' 'SHA256' 'd5763d7f388e2c3b37aa69434bba845df5d0c276a27095ed05ef223a9396bfcd'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204701010030-204712302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204701010030-204712302330.nc' 'SHA256' '1e5fe465b1a51b079b90d6445d583a8fdf44b514fe67f3c1f1712f303f7c4c10'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204801010030-204812302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204801010030-204812302330.nc' 'SHA256' '9d9cabf617cb3c2e01f71b3edeae9624bda94da2468cdcc9e61d0e84328293f5'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204901010030-204912302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_204901010030-204912302330.nc' 'SHA256' 'd8341ae3e606f1e62366d15d8b82b8721be5ba119e1f99644820ea7d708ca6ad'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205001010030-205012302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205001010030-205012302330.nc' 'SHA256' 'a363b978b0175bb7d5dc5163f1c025f050180a28fc025d7ac478f90ffb5b477c'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205101010030-205112302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205101010030-205112302330.nc' 'SHA256' 'cc5c2898c654b759d3efd6e67a7645d198ecfe5195096b4d7361b30521d6bafc'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205201010030-205212302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205201010030-205212302330.nc' 'SHA256' 'ac07bb5833350f21ec262134f230a09686c317ae8d9b2d6761dbad214b336c20'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205301010030-205312302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205301010030-205312302330.nc' 'SHA256' '9ed30226b23c859f6bea955e0b13295aeae18bf9cc0da5305941a92445c98022'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205401010030-205412302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205401010030-205412302330.nc' 'SHA256' 'e22e32ad4c5686e0747ccf08395dc5c1b13482f641c3944800277cd3f2f3e650'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205501010030-205512302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205501010030-205512302330.nc' 'SHA256' 'a49da2a78174872dbf80b40fefe489d8ad6dd63657d20d9a26d6df6b2218b70f'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205601010030-205612302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205601010030-205612302330.nc' 'SHA256' 'f6aaeb64f0fda8901d89045e14868d36877dfca8ba1d88a1d212247da56528ae'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205701010030-205712302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205701010030-205712302330.nc' 'SHA256' '87eae6174a414a7819e7f267810e61c40ab2c46c77c17f66a88b03493d48519e'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205801010030-205812302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205801010030-205812302330.nc' 'SHA256' 'c09a6483d2add30df1825d8b53a99efe45be65b1bc1a703a5f5979fbd437a7aa'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205901010030-205912302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_205901010030-205912302330.nc' 'SHA256' 'db875ecbf4680212407a184accd47c74e2a58d56f774f0de4a17b2a1d8d58540'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206001010030-206012302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206001010030-206012302330.nc' 'SHA256' 'adb6d6a6e395ad82cbc622aee693287f1e5683a26137a4aa2fb0deac9f09c5bf'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206101010030-206112302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206101010030-206112302330.nc' 'SHA256' '1ae94c2df73500ff2cf0b49b4cb935af5081f7ec25641e15f9a517f29ebe8f0b'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206201010030-206212302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206201010030-206212302330.nc' 'SHA256' 'fdb5c961f5661a19c31173ddaa05a442e5d54736f1c90df3eb95eb1c69871a3e'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206301010030-206312302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206301010030-206312302330.nc' 'SHA256' '5cacd59a7de4ae91c6fb2e48d19cef93d0dc050e0d72f2c0e87c1f31efc103ff'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206401010030-206412302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206401010030-206412302330.nc' 'SHA256' '0d1aa8df843c342ebdd5fe9e4351ff9693c769816fbbce82d6d7235674c076aa'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206501010030-206512302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206501010030-206512302330.nc' 'SHA256' 'a6a898df32796905f2d8a1a9a87a1aca8e3a8f001c16d445f41a2bda586b2da9'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206601010030-206612302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206601010030-206612302330.nc' 'SHA256' '889650b8e2283e131c3bd7c7591d1dcc0b845aefdc9956bd18e64fde95ce6d92'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206701010030-206712302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206701010030-206712302330.nc' 'SHA256' 'ae9ecdf9ec248ce902b2535b10803bdb1a98743fdb69624e7abbf945a866d117'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206801010030-206812302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206801010030-206812302330.nc' 'SHA256' 'a35409bcee36ea6ae6cfabe3a39afec5475e30aea224165066fd62d07f8c83a8'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206901010030-206912302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_206901010030-206912302330.nc' 'SHA256' '1d65948cdeeedd2384df7e538817ec0a4aadb853de13f55782f11250c80b4069'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207001010030-207012302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207001010030-207012302330.nc' 'SHA256' '976a2a271384c3f7e0eeecbbf19cf50aceca84b6784e2052b931568c2d35c418'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207101010030-207112302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207101010030-207112302330.nc' 'SHA256' 'b6a273d775d8f0836103f3d5562166000def53f20152a0369c58ae35339aadf2'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207201010030-207212302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207201010030-207212302330.nc' 'SHA256' 'ef88dc5e1afff31207e9aa19e9f5ad9a676c9ca2b442a57c05023eed99b92431'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207301010030-207312302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207301010030-207312302330.nc' 'SHA256' '49acc5d387bed361cf681a498823859951de30f029c6445497fcb4d0ec59f265'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207401010030-207412302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207401010030-207412302330.nc' 'SHA256' '6c22489da3e6c21592b89356e85602b82be3dfbf71a591d0e5c6243437f27fdf'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207501010030-207512302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207501010030-207512302330.nc' 'SHA256' '10415a126b166b47d51c9f9786f9c573e21fca1f804408e7000d902e2416addd'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207601010030-207612302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207601010030-207612302330.nc' 'SHA256' '50b54d93d41b41f7d4d604484f907099d5a3bee12894290c00d82f2356710e3e'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207701010030-207712302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207701010030-207712302330.nc' 'SHA256' 'a17a809950e9e325d1752d92f79c7389c1f95b457b91d88bbf1cd36f4f9aa90d'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207801010030-207812302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207801010030-207812302330.nc' 'SHA256' '30c7e6a55686aacfdf56b242626c5d0f10eb4878fc15c8c6528b79ba82300932'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207901010030-207912302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_207901010030-207912302330.nc' 'SHA256' '0cf89edd587ed22ca8feccf267ea187810655a3f000b202b86ef0d92d842eb52'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208001010030-208012302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208001010030-208012302330.nc' 'SHA256' '3e649b024e1b2f5d20ddca4cdc14a12dd55b113e3d29e6414ab64a5ab2e1f575'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208101010030-208112302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208101010030-208112302330.nc' 'SHA256' 'b8abb00f62e36f661a5f3384760c7212dea62a7872698ced260da5e6b94dabbc'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208201010030-208212302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208201010030-208212302330.nc' 'SHA256' '9aabb958aa02281b10e915a48e1d98be0efa6e39628dd43261ced4c4dbf1498e'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208301010030-208312302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208301010030-208312302330.nc' 'SHA256' 'd8c2877056cd8cc2ec8656af00c67a2934f938b1312ef5e99491f3593e4e7ff2'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208401010030-208412302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208401010030-208412302330.nc' 'SHA256' 'f09d32281bdc73667c0c923b997adf9b25b2eb023dd9bf4fe920e6070afd3e3a'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208501010030-208512302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208501010030-208512302330.nc' 'SHA256' '18378345b00eb5850bb23db009c2f7e87afad51771aadbf519e9c66abede45a2'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208601010030-208612302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208601010030-208612302330.nc' 'SHA256' '3b122937d431f071afaec1697c88b630bc352efd0cecac713942fa826914c7d4'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208701010030-208712302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208701010030-208712302330.nc' 'SHA256' '5e21d2e0b48a7b4ff42b0919d935ab403c613db4458303ab086505a59b728e1f'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208801010030-208812302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208801010030-208812302330.nc' 'SHA256' '1600e9a5d39543e4771a9bc7fad504c8a563214a7c2d60cfa892cea1a24c061c'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208901010030-208912302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_208901010030-208912302330.nc' 'SHA256' 'f81657dd4e0d9f3c4f37657ba26dead7a7e5aa1a9a09fb870d9f8404b1f7a405'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209001010030-209012302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209001010030-209012302330.nc' 'SHA256' '6114ffb3d590e2d333c0daa89ea5061369e41d53a31fc7fdde2abebb6de8ad79'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209101010030-209112302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209101010030-209112302330.nc' 'SHA256' '363c7727c3e870fdab462f98ad532d7e06187fd53728bf2f5ce79b2d5f6235b2'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209201010030-209212302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209201010030-209212302330.nc' 'SHA256' '7925476eaa5446d3dff09f7928ff3cb43d1d998dba1555b7e10c24cbfce13d72'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209301010030-209312302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209301010030-209312302330.nc' 'SHA256' '726219edd9941189da18434678c773a29609ef6bdfac40504b28d31a243a86d8'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209401010030-209412302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209401010030-209412302330.nc' 'SHA256' '47321c0c0dc03cb83505f6241b30b03657c060b75f6f3ba4c511b1ced27edf26'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209501010030-209512302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209501010030-209512302330.nc' 'SHA256' 'ed7b3465a1c11622b76cf51df9202b8bcbe1f4f60cd8cf9b430ae59e0031484d'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209601010030-209612302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209601010030-209612302330.nc' 'SHA256' '55ad31062977e251f57fe66fa343333b8457373681e7d2bfd843112760ea92d8'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209701010030-209712302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209701010030-209712302330.nc' 'SHA256' '93c6247b57e1ce0161048dd8fbd9b58e3d17c0afe9028790a5c1d3e5c20c9cb4'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209801010030-209812302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209801010030-209812302330.nc' 'SHA256' '9a95fce84d36436537a1a9eab6882f8012b318a3855c5017e3f805906a976da5'
'pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209901010030-209912302330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/MOHC-HadGEM2-ES/rcp26/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_MOHC-HadGEM2-ES_rcp26_r1i1p1_SMHI-RCA4_v1_1hr_209901010030-209912302330.nc' 'SHA256' 'a368e38e7e76f960fa6f3dc0b6194c3e7b81f234cd58d096231fa7bbf6d4e2eb'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 94 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
