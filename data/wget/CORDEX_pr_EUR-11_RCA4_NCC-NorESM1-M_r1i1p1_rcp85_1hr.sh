#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/11/27 05:01:44
# Search URL: http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-11&rcm_name=RCA4&driving_model=NCC-NorESM1-M&ensemble=r1i1p1&experiment=rcp85&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?project=CORDEX&variable=pr&domain=EUR-11&rcm_name=RCA4&driving_model=NCC-NorESM1-M&ensemble=r1i1p1&experiment=rcp85&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_200601010030-200612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_200601010030-200612312330.nc' 'SHA256' '8eb03582568ea3eda6a4866ffcb6af66e11437e08ae80d6ec4aeb04e2383417a'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_200701010030-200712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_200701010030-200712312330.nc' 'SHA256' 'f8695ad9f7924e33d448aebf4ef3111385e157880d8586fdd97ce880e1ca83ec'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_200801010030-200812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_200801010030-200812312330.nc' 'SHA256' '4e4c0cb3f8e72c565d0d20028fc6f700fc58b60c653adce7604e625709373af0'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_200901010030-200912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_200901010030-200912312330.nc' 'SHA256' '50e9bc959e7cc4d92eb6ca45228e1a156b513c0aec9e5c004f9889248021b678'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201001010030-201012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201001010030-201012312330.nc' 'SHA256' 'a13aea02b14c01b0835b7fb54114d08029ad00e88c29aa322844a5d496ad8711'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201101010030-201112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201101010030-201112312330.nc' 'SHA256' '96a2b2d4f3072d5596b76293037a7ab25fe94d731e370665cad73377c6a034ed'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201201010030-201212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201201010030-201212312330.nc' 'SHA256' '0814ea251e0e668e16a822890d0e8409c925e40ccb42e56598f56da12672c72d'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201301010030-201312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201301010030-201312312330.nc' 'SHA256' 'bf10108246534a8f34248cdfdf7a7ad10ddbb5c36c29c94e6eda08f4c519cebc'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201401010030-201412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201401010030-201412312330.nc' 'SHA256' '212e1da47138bcf46e40c1ccf5ec1acb4bec2e10faf3d3494b284e728a07a920'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201501010030-201512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201501010030-201512312330.nc' 'SHA256' '202e7660b9571aa60a5499329dd102c25a9c0005b0fedb84b91013f759b8f4fa'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201601010030-201612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201601010030-201612312330.nc' 'SHA256' '9f8eb290635be9eedfe4e16337bbd9a7b6dd13d90779f502cc2a37c911af95b6'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201701010030-201712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201701010030-201712312330.nc' 'SHA256' '8cb345f944509401fdcf130633274dc76a7dfaed6e27a2a6f08b2c31ac43f515'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201801010030-201812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201801010030-201812312330.nc' 'SHA256' 'c883138549b491ec055f8b65e36211e106544372576803070a3f27c23def3eb6'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201901010030-201912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_201901010030-201912312330.nc' 'SHA256' '2143846828cd6f801988a280aa42fdb5e43dfaa346703c333bbdd168bde6cfc2'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202001010030-202012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202001010030-202012312330.nc' 'SHA256' '7b6644907e39a3aa9fe4749c79fdef05e0e58d0c36e64a5a50c6f3ea14880216'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202101010030-202112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202101010030-202112312330.nc' 'SHA256' 'a634459d6d8f06126fc154e78706a54bee38a3d43982dbffa94c6357ae5dd3d1'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202201010030-202212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202201010030-202212312330.nc' 'SHA256' 'b9c83657e53f7194ef2b390a82cd44148e6fa1950ef6fb9479369c96011db46b'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202301010030-202312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202301010030-202312312330.nc' 'SHA256' '83aad6b7f6717ed5b6f5251a426c1412077f731758028f06c22510b1c5dce692'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202401010030-202412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202401010030-202412312330.nc' 'SHA256' '591525e14baeb5d022b5ecd49e6ce855ca4af7007f0225b26e51a36be953d53b'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202501010030-202512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202501010030-202512312330.nc' 'SHA256' 'cd58787bb6b0a232b0318576ec9139d1320cc9cb0dfaf244a4cce726d9e9cf04'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202601010030-202612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202601010030-202612312330.nc' 'SHA256' 'ac381a8a917dd70a14b0b661ed9691cff10ea2ea05d75a4c099394a733454647'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202701010030-202712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202701010030-202712312330.nc' 'SHA256' '6de8e07efcae3cdf57edfa6ae4651cf490fc36c01516c040039914ce1c3f5e80'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202801010030-202812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202801010030-202812312330.nc' 'SHA256' '646d3c7cac4d3bcc369c1afcf5508889f1a0c6b61c6ca2bf237cfc1d4d55a53d'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202901010030-202912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_202901010030-202912312330.nc' 'SHA256' '9170b5911dc6dc70286bd8900a98327d8bf0db32f4782dd0f8127175fd1a781e'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203001010030-203012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203001010030-203012312330.nc' 'SHA256' '2792d5cfc08be258d41fdb5d8167182f56cddf96c7f294695f3496571b9db1ff'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203101010030-203112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203101010030-203112312330.nc' 'SHA256' '6778da3d723da4c487889f8b89630eeba3ea133f4434d6f3802798c3726a9684'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203201010030-203212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203201010030-203212312330.nc' 'SHA256' '872d7f390aa8ce2807780f7b21b072740c09e254435ed3a6907d0f2826287c93'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203301010030-203312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203301010030-203312312330.nc' 'SHA256' '370b2538d8f58e6767f4d36cc48e864d15bd515d58cad6df7174446180e6c7e9'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203401010030-203412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203401010030-203412312330.nc' 'SHA256' 'abde54aeb2e79e3e0f783313d22544811d85c7e7741b6bcba85aaba60496e539'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203501010030-203512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203501010030-203512312330.nc' 'SHA256' '2ea63bc31357be327eebf32aa5796662c2d8da5620b8b4175599f19797f90b04'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203601010030-203612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203601010030-203612312330.nc' 'SHA256' '7d1ff88d9fcf320bd05eb7972416456cc34bd38d087717aad95aaad2fa56bb67'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203701010030-203712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203701010030-203712312330.nc' 'SHA256' '565435e8165695c3fbf65c96f9c26c73f3a882973a3fe555b34393c71df52e59'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203801010030-203812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203801010030-203812312330.nc' 'SHA256' '6f073d192b7f128ed196cf2905883bce23b6490b4932bffc02849f813a2651c2'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203901010030-203912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_203901010030-203912312330.nc' 'SHA256' '6e691efbedf7f0087be6bb8d1a18206d25fde20bb09e02673ef2bc17b3471903'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204001010030-204012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204001010030-204012312330.nc' 'SHA256' 'a9fd8c60bf76855ed3ef15aade52c79f67914c041a66f1c809af36b7093be869'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204101010030-204112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204101010030-204112312330.nc' 'SHA256' '455a184553ade0b152420f55f998fc15684b197682e873ba7709c5f09f8b463c'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204201010030-204212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204201010030-204212312330.nc' 'SHA256' 'fd772197ddac75a0ab83b3a0f605093aa5071f35fcbfb856c11b7e5fffad23d1'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204301010030-204312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204301010030-204312312330.nc' 'SHA256' '597f46346b1a0c99eb8a1bb21c17fa8316241085138e97c4d28171e460cb7765'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204401010030-204412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204401010030-204412312330.nc' 'SHA256' '047323d4d2695b19bb9a96972517ad62a5b0a891313a9181eb3da6a80f878c4a'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204501010030-204512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204501010030-204512312330.nc' 'SHA256' '9b0d55e520b673e9be2b8f19db6d88b3cec00ded026a81b7a50aac935db3ea97'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204601010030-204612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204601010030-204612312330.nc' 'SHA256' '03dbda8123e57b23a8e1f54683453e6a105aea5f0b9060821df2911c4e772b4c'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204701010030-204712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204701010030-204712312330.nc' 'SHA256' 'e5925a61941800da40292d4b5a1901a4b89eb6818aa71e6a621b9f1f190ff147'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204801010030-204812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204801010030-204812312330.nc' 'SHA256' '27815c148b2c48f20d314d2d6b5161ac5b1a4b7a1c8b67481c574ecbfd24bc05'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204901010030-204912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_204901010030-204912312330.nc' 'SHA256' 'bbc6c7e689f6261ecc1278ab425f6dc0d71367e7b8647970bc5016963f247a87'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205001010030-205012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205001010030-205012312330.nc' 'SHA256' '4ad88f6286cfc93aef36761fe9bf57514e2a6e9c3b15d6faea2d09e6e80d8775'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205101010030-205112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205101010030-205112312330.nc' 'SHA256' 'd72bd127111737ba24f617b4eb28bd088e9b5213aa2bccd62f520e485813d5af'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205201010030-205212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205201010030-205212312330.nc' 'SHA256' '9985efbe25998bc28b60181d5874d0fe92bb4477fab0c4a65318af01589ea6a6'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205301010030-205312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205301010030-205312312330.nc' 'SHA256' 'c740f3ebf7ca06a5e22fd487b77c78a41a4000b809d0b87f95563965076a75bf'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205401010030-205412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205401010030-205412312330.nc' 'SHA256' '7d1c7e1822331217c829bce7eeb5cbc3ce98bcf8a2c7ec382d85973c771b2d35'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205501010030-205512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205501010030-205512312330.nc' 'SHA256' '63f9dce33b1cd4f46270d4a155b680d7905f5e01a2123af4fde45048da80d4e0'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205601010030-205612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205601010030-205612312330.nc' 'SHA256' '7bd5765bea22381f9da0460a9c12c8aceb8fcd2b0116d6147619c111b741a20e'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205701010030-205712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205701010030-205712312330.nc' 'SHA256' '2e56ff4abf50fb0d1f70e38457e96ada173000128a4a7bddedd74c91df424fba'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205801010030-205812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205801010030-205812312330.nc' 'SHA256' '21edb21de2ceab05c17586c07fd5c6470d1230687dd835546c8d6a7414966d84'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205901010030-205912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_205901010030-205912312330.nc' 'SHA256' '1b8415ab9bedec27ad248cf6ca862e257d76519e54819e01e4dd2288c0ce4ca9'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206001010030-206012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206001010030-206012312330.nc' 'SHA256' 'f94d8073247e5370d8b6243b04445f26058c2ebbaad8d98fdff554c54bab7f6c'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206101010030-206112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206101010030-206112312330.nc' 'SHA256' '6a5a29f32435d05f8e932a69308144346a41ac8e3638f3a2367da44aed4f6fb5'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206201010030-206212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206201010030-206212312330.nc' 'SHA256' 'c0c6db2e1321c701253137fb331e0cd62fb3b08b5607d491af8b38dfc86793bf'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206301010030-206312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206301010030-206312312330.nc' 'SHA256' '90de8c2dd42c4be220650db831607fb6bba0c4c7fe08a0e736136507826fb180'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206401010030-206412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206401010030-206412312330.nc' 'SHA256' 'b7840efb18330edf6b4d38c76127be222af675308e97807053ad79039d1b9821'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206501010030-206512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206501010030-206512312330.nc' 'SHA256' 'a28c6b577a435c1fb6077f314e461a0736a2a17b43e08ad1ff4744e3cd766ffa'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206601010030-206612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206601010030-206612312330.nc' 'SHA256' '343b60e75af52f12f6f19df2fa69c673763ad7b7d1f66397d3fdb65dcdd9eb62'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206701010030-206712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206701010030-206712312330.nc' 'SHA256' '05eaa1b230611544cb802d964ae84a9a2e49f80fc903cadb0cca15734f8ba740'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206801010030-206812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206801010030-206812312330.nc' 'SHA256' '5198c0cff5e44f599607e6847a6320a46ae4ebc1e458bb572c9a333534dd1748'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206901010030-206912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_206901010030-206912312330.nc' 'SHA256' '7c5ff96c9c9ffcbf1427d05aee5d0120eb598ba1a2f862fd832e74c9d15f650f'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207001010030-207012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207001010030-207012312330.nc' 'SHA256' '1ecc5eab5f97b1915ba617253c988ff6637bf7a0c50af1265029eb6c44cdfeff'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207101010030-207112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207101010030-207112312330.nc' 'SHA256' 'c063a2f19c92b3547f959b7643a9eda5884380d5843e0fd87d4d73bf79a80ca7'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207201010030-207212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207201010030-207212312330.nc' 'SHA256' '3c371332c9131c2de953be4004dbbb4425c56c9f9422ba8e242ab3129cfbb955'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207301010030-207312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207301010030-207312312330.nc' 'SHA256' '642835acbeb552b036a6d2cdb0d9c22e9ff54eafda26c4e950c14ea1d8c73bd8'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207401010030-207412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207401010030-207412312330.nc' 'SHA256' 'ddc77872e6c7c225cbdd29018de13bfbc98f0aab90e2da057bf48e8f86c1fe1a'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207501010030-207512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207501010030-207512312330.nc' 'SHA256' 'ea7aa7987b3e28d2fc79214582a990c49e0ea3d7ad20eeb8775639bde5ff5ece'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207601010030-207612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207601010030-207612312330.nc' 'SHA256' 'df9a94710e5318ac6bb4db7bbae4592acaf7924a711d35a7911d7cff941026ff'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207701010030-207712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207701010030-207712312330.nc' 'SHA256' 'c11843827d58c39d15883916a18da1ed08a3aacd9cbc7c757056f7b83e254c59'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207801010030-207812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207801010030-207812312330.nc' 'SHA256' '7ed2615a2f9de77875305d1afc38c9e472570b09f048b4dba90cbc92deccc59b'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207901010030-207912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_207901010030-207912312330.nc' 'SHA256' 'a5b748fd6edaf5fa261ebb048840d6672a60b93b557c3393afb540aed4d37640'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208001010030-208012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208001010030-208012312330.nc' 'SHA256' '000cdf57cfe9cc4068e497c702e26ceb0d2f00ef52461bccf75d815b74f0a381'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208101010030-208112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208101010030-208112312330.nc' 'SHA256' '4fb969877b939ceb3636785c29dcb216fbdafb33425f2e592df7f4829a081b3f'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208201010030-208212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208201010030-208212312330.nc' 'SHA256' '6da0767605673f840b554054b37ee6603dd5e365d01441f32bf67c1d769ff4a4'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208301010030-208312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208301010030-208312312330.nc' 'SHA256' '1835bea0b85048f5913791455558caa56d4e11344817821c95a6785709395c30'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208401010030-208412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208401010030-208412312330.nc' 'SHA256' 'e28ab16a3aea861a5f8b628c14341e6a8b83fe2b3943c079a768ef5aecd3896f'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208501010030-208512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208501010030-208512312330.nc' 'SHA256' '8ec4c05219046ea96d3360a7dfb2900a476e5219641dc4f7185b909120d38c4a'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208601010030-208612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208601010030-208612312330.nc' 'SHA256' 'cb65bebda19b840257ad8beca74687523515f2d54076520e69a378c2ce4a84aa'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208701010030-208712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208701010030-208712312330.nc' 'SHA256' '8f15095c6f99736131762315e43f5e6c9c2613a71c56d4c4d52265299d072cf3'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208801010030-208812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208801010030-208812312330.nc' 'SHA256' '7a9f795eb713c5f17746268da1a608fe5979d910ec00ef43f54d027122d96e52'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208901010030-208912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_208901010030-208912312330.nc' 'SHA256' 'c00bda9c9e1b345b448e5bed81e274f050e89f7949a9a37849817ae6deea7913'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209001010030-209012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209001010030-209012312330.nc' 'SHA256' '8f433338be36529d0fad23f95e5026105473677c00593cd2104e4c452378f299'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209101010030-209112312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209101010030-209112312330.nc' 'SHA256' '32d8a3aa3ad1d91c33089465d5f74d00fa2fb2ba9626e9deb7063ce12d12ca6e'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209201010030-209212312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209201010030-209212312330.nc' 'SHA256' '7f1b7b2acac52c6d2da16fc34630c4a32222e2ab31f19824ca2478c9e53f9358'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209301010030-209312312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209301010030-209312312330.nc' 'SHA256' 'bb6cbb57b7bac8b71449c387c14f90f2891e54b707ce9bba4d0550073e1b6f65'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209401010030-209412312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209401010030-209412312330.nc' 'SHA256' 'd071dcdb0bbec4eb149d7ed070cfe720a9eb21e6e1001bdc1331bd9e7c39ba11'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209501010030-209512312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209501010030-209512312330.nc' 'SHA256' '8b40ffe243384d4bfdbfa1a551911c659cab806d7ef253d18f80bd92cb9df980'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209601010030-209612312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209601010030-209612312330.nc' 'SHA256' 'beb047682eaa0b983d2358a6ba743cd22afd8f3e6b7ad0efe0431d0120025cb4'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209701010030-209712312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209701010030-209712312330.nc' 'SHA256' 'f7aa3e28fbfe0db9d8cc90ec20e0aaaa51db65592636d2d6413720e06f9cd24d'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209801010030-209812312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209801010030-209812312330.nc' 'SHA256' '0bbf433a5bf6bf44fb56606310dd51016f0b8e8baa24bc4e9e0a65760506dd67'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209901010030-209912312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_209901010030-209912312330.nc' 'SHA256' '71dd4325bad2b0074936de5d63f770f83c6fa46968f1710efe3c47c3db0615b2'
'pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_210001010030-210012312330.nc' 'http://esg-dn1.nsc.liu.se/thredds/fileServer/esg_dataroot7/cordexdata/cordex/output/EUR-11/SMHI/NCC-NorESM1-M/rcp85/r1i1p1/SMHI-RCA4/v1/1hr/pr/v20191201/pr_EUR-11_NCC-NorESM1-M_rcp85_r1i1p1_SMHI-RCA4_v1_1hr_210001010030-210012312330.nc' 'SHA256' '1d067e67d3611d2cb674e31683e9796e21b98d34caa07fda80aba022305b88fc'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 95 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
