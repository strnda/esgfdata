#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/11/27 05:50:04
# Search URL: http://localhost:8080/esg-search/wget?project=CORDEX&variable=tas&domain=EUR-11&rcm_name=COSMO-crCLIM-v1-1&driving_model=ICHEC-EC-EARTH&ensemble=r12i1p1&experiment=rcp85&time_frequency=1hr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?project=CORDEX&variable=tas&domain=EUR-11&rcm_name=COSMO-crCLIM-v1-1&driving_model=ICHEC-EC-EARTH&ensemble=r12i1p1&experiment=rcp85&time_frequency=1hr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200601010000-200612312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200601010000-200612312300.nc' 'SHA256' 'eb273b80974eab6cddb6223802e2f6cedad912adc3e161c7bdf3ee7a32edd20e'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200701010000-200712312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200701010000-200712312300.nc' 'SHA256' 'd05eb5074e3650d69deff2aac2ddafb42e7cb15b502bfc6c9362ee7bf5f9d77e'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200801010000-200812312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200801010000-200812312300.nc' 'SHA256' '2c90eb4c8cc444be85d6b0d7f54f4ac6cef658dff9dab68031040883ad9e940a'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200901010000-200912312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_200901010000-200912312300.nc' 'SHA256' '6b0aa0af9ab89c39afa4079daa24ecca33d1f4b5db751154f00950f652dfbc23'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201001010000-201012312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201001010000-201012312300.nc' 'SHA256' 'eb2d26bd7bbf8bcea751756447bdd7476627a3701d45c5537e479ea1ddd097ec'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201101010000-201112312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201101010000-201112312300.nc' 'SHA256' '92ddad01aa6c01bbf02cc28136252b0dcb7fb906dbcd23a26d6b4f97740feef3'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201201010000-201212312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201201010000-201212312300.nc' 'SHA256' 'f6e4978f04bb2ee62d6df8cfaa9df710d797187a60588474dfda647e8d46b335'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201301010000-201312312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201301010000-201312312300.nc' 'SHA256' '4f4a77180bb62665e84459b48362d4df2e4ad5733bf840eac23eb9bc7eaf41b2'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201401010000-201412312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201401010000-201412312300.nc' 'SHA256' 'af30c7431697c79f2d8007f0bed10540b4f7a2d3aa505af5f976d933fe1bf22a'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201501010000-201512312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201501010000-201512312300.nc' 'SHA256' '37ba338f7cbd3b5ad7b439294d9127522a134c5dddc3a1dec90ce55634aa0ede'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201601010000-201612312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201601010000-201612312300.nc' 'SHA256' '481cf81699eaec4bb0a58307c64bc826121a280d7a9fd87006ebbcf6b2e95385'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201701010000-201712312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201701010000-201712312300.nc' 'SHA256' '816d555ab9c375f8daf253cf60d6eac7171e347254f68089aa97965d5fc0d95c'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201801010000-201812312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201801010000-201812312300.nc' 'SHA256' '797ccc3a97c80658e6a5a86dbd57c38813062b81a3dfd009d429ca09b41e3da5'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201901010000-201912312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_201901010000-201912312300.nc' 'SHA256' 'e49799aeed24c649128b9a997f9684badc356cf821507b64202e79b60cb53659'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202001010000-202012312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202001010000-202012312300.nc' 'SHA256' '1b2b5aedc4ad76c72e779ffd04641a3c29e92411266b6517741344056064a187'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202101010000-202112312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202101010000-202112312300.nc' 'SHA256' '475c11c8b41bef33703204de982b7524eb5845a058590e6a4e7d87360c34fcba'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202201010000-202212312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202201010000-202212312300.nc' 'SHA256' '02acf9d2d4e19c0d90ec75722810b16fd112a57eb404a8bb426490ff3644f555'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202301010000-202312312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202301010000-202312312300.nc' 'SHA256' 'e612f31831538930b59b2c585aa37a722c47b7bd3a074f3eb7fac2c4d35e24f1'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202401010000-202412312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202401010000-202412312300.nc' 'SHA256' '2f402d4a79aa7c4b913c100394d5cf65ce67e94447957066b1ae7111416552ad'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202501010000-202512312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202501010000-202512312300.nc' 'SHA256' '3415def99f38f1215359173b78c77b4c84124963a40d49c7fa9ed71eb4048b3d'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202601010000-202612312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202601010000-202612312300.nc' 'SHA256' '191bbdc271bbf415cd606aeda38b2f3bddb3032854856b50870ee923855c6405'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202701010000-202712312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202701010000-202712312300.nc' 'SHA256' '4323e09dc7ca502d5309b252042b5ac3a16d3ef56fe51698ec4962175a372423'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202801010000-202812312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202801010000-202812312300.nc' 'SHA256' '7d2f24890312425d7cb467054a5962cbf4624ac75feaa849f3f837025e8552fe'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202901010000-202912312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_202901010000-202912312300.nc' 'SHA256' '8a6087962aaa1b7d5b1616e81aeb4f507b86dbf58b7d45eaedf00efd520c065c'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203001010000-203012312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203001010000-203012312300.nc' 'SHA256' 'bf6ed2e45e9836c47d7ada2e55a8e8663a19efa00cf27d793f869881ebb579bc'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203101010000-203112312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203101010000-203112312300.nc' 'SHA256' 'f48fd69c530e4c66d100cb9c638091b55bd898cb6eba209d81eeaeaeb25f60b5'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203201010000-203212312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203201010000-203212312300.nc' 'SHA256' '8824a3d5a54aa88566dc97e587bb5a70991ea93b587e462db18c1c405aa91cea'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203301010000-203312312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203301010000-203312312300.nc' 'SHA256' 'b79f16e4cef162daa0d648b6d7e7c33d6b89c5ddd42ac85f70cea1147e694850'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203401010000-203412312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203401010000-203412312300.nc' 'SHA256' 'b7746f9af39c0b46dcfa743d9b8dceeb20ee1ec2afd96f75bb535338aa9f7cd0'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203501010000-203512312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203501010000-203512312300.nc' 'SHA256' 'c3850a330edb026188937f1339cea93d030a07d3417a3c6f17bd046055b7b9d6'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203601010000-203612312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203601010000-203612312300.nc' 'SHA256' 'b81375086b89024584ab12cdc2d288c46c2545caacd993164ed9a3a81a484692'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203701010000-203712312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203701010000-203712312300.nc' 'SHA256' 'f7a57eae509e37656f13bd9192e86ba9d247c2ad312143e978e408b932cf5a09'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203801010000-203812312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203801010000-203812312300.nc' 'SHA256' '64aea787f003ca161be5da9805ff21414507afa7f494681456fa2c02f371da18'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203901010000-203912312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_203901010000-203912312300.nc' 'SHA256' '7da5596b0267d99af80a531592fae5a065fda85c7c7d390a51fc4fbaac4bd79f'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204001010000-204012312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204001010000-204012312300.nc' 'SHA256' '1384ad165dd33af877be192f34544de92f5ad025e99363680cb05b698371948f'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204101010000-204112312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204101010000-204112312300.nc' 'SHA256' '748872acd75b8eee7539d7f6c72eb024ee71dc7a2a5b714f71d44dc54e3c469b'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204201010000-204212312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204201010000-204212312300.nc' 'SHA256' 'b050b7fe7a458510586b28de27326e7b2dc20d3818bd8e777ccc02296e0950eb'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204301010000-204312312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204301010000-204312312300.nc' 'SHA256' '2582ab10445f173b1361194c0f90930d6f13f5d1173d348458e9542130390bbe'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204401010000-204412312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204401010000-204412312300.nc' 'SHA256' '4f1645aefb6957c611510a3216967f751c94115274b5dead8fa62d36ab1e9b36'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204501010000-204512312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204501010000-204512312300.nc' 'SHA256' '066fe63fadf1e88c64ac9b7193b8cdd136c6c64c577dea22ab0756e3c8a9ccf2'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204601010000-204612312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204601010000-204612312300.nc' 'SHA256' 'e46044769df190ae15571ebe724775cefbcca84ede5afb1e1e2c43765b723d1c'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204701010000-204712312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204701010000-204712312300.nc' 'SHA256' '94b9d08ce16737054d0cb3da2e01e20570af8c74953f8b2eaf1dffdb3e3cc446'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204801010000-204812312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204801010000-204812312300.nc' 'SHA256' 'bddb349dcdf6fa9a8b11fce73dc3c2cf2d1624715ec84a75a54378a0ba24c7a8'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204901010000-204912312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_204901010000-204912312300.nc' 'SHA256' 'df242567569a4ec327efd6aeeb8d6973b070ac40b7ca5da896c0c3f59042a7c9'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205001010000-205012312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205001010000-205012312300.nc' 'SHA256' '0160af39691e3ce541b6e4a23becdc4fd5c807d3cba06938ba00328a84f17690'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205101010000-205112312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205101010000-205112312300.nc' 'SHA256' '91fe60d460b26a690bb0e78bcc6f8c86a20f9f0920b7485426adc1a5ebfd26f8'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205201010000-205212312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205201010000-205212312300.nc' 'SHA256' '3f25469d427c7ba1169164141ff86299f1faff3dc74371d7dc3df1d768b63600'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205301010000-205312312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205301010000-205312312300.nc' 'SHA256' '5b049a26549d7f81500368296fc157e8d0630b4fd3e19c3933397239efb9bd72'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205401010000-205412312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205401010000-205412312300.nc' 'SHA256' 'de15e074ab3fe1231fdb2812adc2b36ad8daecf30cef92003a51d03d57e8079e'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205501010000-205512312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205501010000-205512312300.nc' 'SHA256' 'a85747ef8930ae94e9cc8ff41bb4cfeea6a9a5a4fa35c8e428c499254af971d4'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205601010000-205612312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205601010000-205612312300.nc' 'SHA256' '0eae549867b1c151737853791ee0fa12c34c3c7a6808c99c9a437dc323333884'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205701010000-205712312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205701010000-205712312300.nc' 'SHA256' '2079df2348ee14d124a34b6bc77658eb17e973e47c5d69fb7b98dd06476a3ab0'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205801010000-205812312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205801010000-205812312300.nc' 'SHA256' '9e7b2c0b825b0bf60e02f8ffc77e275a478c7b4660fd0ad09894458cf1243768'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205901010000-205912312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_205901010000-205912312300.nc' 'SHA256' '4ab51d4c0ebc788c4752ca9027d981c49d6df55ed7c0b24f1c5dd22e48391840'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206001010000-206012312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206001010000-206012312300.nc' 'SHA256' '0ff17fb2f74154f995ada1b03dbe0b7e377c9a91d0cac2c6646b3fdb9953478c'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206101010000-206112312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206101010000-206112312300.nc' 'SHA256' 'c892bf9eaeabde6bc74e8e79c160e4fa688840769903bdc0bb3adb342e5a279b'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206201010000-206212312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206201010000-206212312300.nc' 'SHA256' '02ca5ea31020493e3537b4613b691849e0cafe3367bdedd3da6853bcc02a3e40'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206301010000-206312312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206301010000-206312312300.nc' 'SHA256' '469a8677b119bb5ab9ab3ea015c55651ea33fa3a9b6a15556c49cdd437e0b5c3'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206401010000-206412312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206401010000-206412312300.nc' 'SHA256' 'fa7ba600ea4ab35023da06d983880267f00f50272a4abedce4167615420303f8'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206501010000-206512312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206501010000-206512312300.nc' 'SHA256' '366153406e4c92b2d170eab1823b8bdc748adf83980b876fed6adb4415a277cd'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206601010000-206612312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206601010000-206612312300.nc' 'SHA256' 'bdff780b73ac0a51cb692ca6870f6350f5f8910d096bc8274927215844b4bb85'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206701010000-206712312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206701010000-206712312300.nc' 'SHA256' 'f4c80caf612a231e78c2427017f502b098003f8aa52c493b9e8228b4b7f4251e'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206801010000-206812312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206801010000-206812312300.nc' 'SHA256' 'dd47de80fa1d1c8dc9e294c1e6589517e308bfc8c9eab975b4899fe1b0b975ae'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206901010000-206912312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_206901010000-206912312300.nc' 'SHA256' 'f6ce2712b737ded97c7ae6fa45c549b66e775138bf13d081af0f652bc7a21068'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207001010000-207012312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207001010000-207012312300.nc' 'SHA256' 'e8d9ad881eda01f1384733401354ff1434f8d7279defb2022d2e27e7cf66b011'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207101010000-207112312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207101010000-207112312300.nc' 'SHA256' 'd777fa1ceb7e7cc476bce2ebcc59d05ca539a20954378ed58353c3987e1ea76b'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207201010000-207212312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207201010000-207212312300.nc' 'SHA256' '4b92e6681cf95e106fe5e57f028b891910975e84dcc77caab141f3c153e43239'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207301010000-207312312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207301010000-207312312300.nc' 'SHA256' '52106eb0d3d09c02ec91a3ce6409c288f5d051cca1bf7329617cea087db500fb'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207401010000-207412312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207401010000-207412312300.nc' 'SHA256' 'd376c409a68c4a91e7fbe604fd5203a0fa362402cb32750da6585e8dffc98657'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207501010000-207512312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207501010000-207512312300.nc' 'SHA256' 'c3ce1e504c948ed5d83f444fd4a3c6ca3ffb32594450c24d13f279a923f0cef0'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207601010000-207612312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207601010000-207612312300.nc' 'SHA256' '608267c41757eff611b59188b68428d0b6f7f1a8188deb08e1319527af1ced56'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207701010000-207712312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207701010000-207712312300.nc' 'SHA256' '2815e0ac88c1bb142573d802d88c4ec09635763087564b16aa71efe2c306e136'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207801010000-207812312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207801010000-207812312300.nc' 'SHA256' '4b2c8a943311adda5c37e3728c651029973fd0945a20c31a8c3f07d32529f600'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207901010000-207912312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_207901010000-207912312300.nc' 'SHA256' '089df1389350bddd10c2484a0e222e595c57573d4b1ce8d2e92d26cbf305de69'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208001010000-208012312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208001010000-208012312300.nc' 'SHA256' '3ea849f50ca28de4b574dc057b1c3a59ab1725772f4dd7339fa93b237c91682a'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208101010000-208112312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208101010000-208112312300.nc' 'SHA256' '20d4c7cffa1e16c3e67540efb7f715f52b7db78b47fc5cbf206686d97f0ce1c2'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208201010000-208212312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208201010000-208212312300.nc' 'SHA256' 'ec3d5343f113849f4ce0337ec8ad2c3c654a24d6d433faf37fce7c1eb1d57b9b'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208301010000-208312312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208301010000-208312312300.nc' 'SHA256' 'a3bddc7704841929f1eb84fca0a752a3312b91e95ab399f5777141223607a472'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208401010000-208412312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208401010000-208412312300.nc' 'SHA256' '9fbd59cff11710729c31679f647d480393b2a93e874df4c8ecc85be2c7d4db80'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208501010000-208512312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208501010000-208512312300.nc' 'SHA256' '0e3541f4d87982ce962d39d67940d40793891b4b2d7c26f023ece19a6397d34e'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208601010000-208612312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208601010000-208612312300.nc' 'SHA256' 'cc766a4e5fa9edb3027ae538d92e024152c2f8d7f1c40a0c1abd9d53619b89a6'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208701010000-208712312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208701010000-208712312300.nc' 'SHA256' '2b5706ecfc850c79970b9c57342597902df3329f97d28de33d73a8934ef1a95a'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208801010000-208812312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208801010000-208812312300.nc' 'SHA256' 'd832394942747d012787e3c1a69bc25a0a8bb85034fde49d8009aaa7f8fcf87d'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208901010000-208912312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_208901010000-208912312300.nc' 'SHA256' '29c259a12fd014b90d75538fcbabe9f3199567156b9c13afc8e57c47398ea6dc'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209001010000-209012312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209001010000-209012312300.nc' 'SHA256' '32cb6a726d0937ef717415a11658f730508f866dac14b3543935a365efd514db'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209101010000-209112312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209101010000-209112312300.nc' 'SHA256' 'c6cd66bde7dd9799dcf343ec4584a41daaa6d3eb49f3644b4bbb3e79931d46f0'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209201010000-209212312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209201010000-209212312300.nc' 'SHA256' 'c2b0a626f1ea6f943afb1f3f76167033f6b809a32248755a22e6225aef04cc1f'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209301010000-209312312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209301010000-209312312300.nc' 'SHA256' '80bb066104eb5865040af68efe3bab74966de6ba82ceda3ffc87a8322f082812'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209401010000-209412312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209401010000-209412312300.nc' 'SHA256' '0439fbbbf11e1f8c80dc954357649d4b1678857fd8da27cb5461c7f4037cd35f'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209501010000-209512312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209501010000-209512312300.nc' 'SHA256' '90a26ef0b69f306a87b6adb0312ed1ebbb8cb3d74e9ad458528214c77a098f30'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209601010000-209612312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209601010000-209612312300.nc' 'SHA256' '744bbc88e3c27d9766472bd29ec978c85cc3c0037f81e57808afd92e61fa44e1'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209701010000-209712312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209701010000-209712312300.nc' 'SHA256' '3509863e2f4ce6dc437b7575109ee72968085ed6c18b5aa9069f61afc08973d1'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209801010000-209812312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209801010000-209812312300.nc' 'SHA256' '9a4ab86a96347a9119f793aa8c646fc62f2c766d557ed231aae7db86d09d9fc2'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209901010000-209912312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_209901010000-209912312300.nc' 'SHA256' '658f34d5cf9aafa9c8a1dd44265410a8df1ba0f4dc84883796184364cfa5634e'
'tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_210001010000-210012312300.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex_l02/cordex/output/EUR-11/CLMcom-ETH/ICHEC-EC-EARTH/rcp85/r12i1p1/CLMcom-ETH-COSMO-crCLIM-v1-1/v1/1hr/tas/v20200609/tas_EUR-11_ICHEC-EC-EARTH_rcp85_r12i1p1_CLMcom-ETH-COSMO-crCLIM-v1-1_v1_1hr_210001010000-210012312300.nc' 'SHA256' '765ba9c11d38a0d92e0c153a596a400604871ba2648597269d8abb6d284a725f'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 95 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
